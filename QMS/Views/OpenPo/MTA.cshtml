@using QMS.Core.Enums
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = "MTA";
    var userType = HttpContextAccessor.HttpContext.Session.GetString("User_Type") ?? "";
    var vendor_Name = HttpContextAccessor.HttpContext.Session.GetString("FullName") ?? "";
}
<link href="~/css/fontawesome/styles.min.css" rel="stylesheet" />
<link href="~/css/tabulator/tabulator.min.css" rel="stylesheet" />
<link href="~/css/tabulator/tabulator_bootstrap4.min.css" rel="stylesheet" />
<link href="~/css/pnotify.css" rel="stylesheet" />
<script src="~/js/jquery.min.js"></script>
<script src="~/js/jquery.datatables.js"></script>
<script src="~/js/pnotify.js"></script>
<script src="~/js/pnotify.confirm.js"></script>
<script src="~/js/tabulator.js"></script>
<script src="~/js/xlsx.min.js"></script>
<link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
<style>

    .bborder {
        border-bottom: 1px solid #eeeeee;
    }

    th {
        border-bottom: 3px solid #eeeeee;
    }

    .current {
        background-color: white !important;
        color: blue !important;
    }

    .modal-header {
        /* background-color: #ececec !important; */
        padding-bottom: 7px !important;
        font-weight: bold;
    }

    .modal-body {
        padding: 0.4rem 1.25rem;
    }

    .form-control {
        padding: 0 10px !important;
        border: 0;
        border-bottom: 1px solid #cccccc;
        border-radius: 0px;
    }


    label {
        margin-bottom: 0;
        margin-top: .3rem;
    }

    #scrollToTopBtn:hover {
        background-color: #0056b3; /* Darker blue */
    }

    #scrollToTopBtn {
        outline: none; /* Removes the focus border */
    }

    #uploadDetailTable tr {
        background-color: #ffffff !important; /* Force all rows to be white */
    }

    #uploadDetailTable {
        width: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
    }

    .modal-open .tabulator-row {
        min-height: unset; /* Removes the min-height */
    }

    .select2-container {
        z-index: 0 !important; /* Ensure it's above the modal */
    }

    .tabulator .tabulator-header .tabulator-col {
        font-size: 14px;
        background-color: #D6E4F0;
        font-weight: 600;
        border-right: 1px solid #ccc;
    }

    .tabulator-row .tabulator-cell {
        /* border-right: none; */
        padding: 5px 5px;
        font-size: 14px;
        height: 30px;
    }

    .tabulator-cell:hover {
        color: #4682B4 !important;
        cursor: pointer !important;
        font-weight: bold;
    }

    /* Slideout modal customization */
    .modal-dialog-slideout {
        position: fixed;
        margin: auto;
        width: 90%;
        height: 100%;
        right: 10px;
        top: 50px;
        bottom: 0;
        transform: translate3d(100%, 0, 0);
        transition: transform 0.5s ease-out;
    }

    .modal.fade .modal-dialog-slideout {
        transform: translate3d(100%, 0, 0);
    }

    .modal.fade.show .modal-dialog-slideout {
        transform: translate3d(0, 0, 0);
    }

    .tabulator-tree-col .tabulator-tree-control {
        display: none;
    }

    /* .tabulator-row.tabulator-tree-level-0 {
                                        font-size: large;
                                        color: #4682B4 !important;
                                        font-weight: 600;
                                    } */

    .tabulator-row.tabulator-tree-level-1 {
        font-size: medium;
    }

    .tabulator-row .tabulator-cell .tabulator-data-tree-control {
        border: 2px solid #4682B4 !important;
        background-color: #4682B4 !important;
    }

    .tabulator .tabulator-data-tree-branch {
        border-left: 2px solid #4682B4 !important;
        border-bottom: 2px solid #4682B4 !important;
    }

    .form-check.form-switch .form-check-input {
        width: 2.4em;
        height: 1.2em;
        background-color: #ddd;
        border-radius: 1.2em;
        position: relative;
        appearance: none;
        -webkit-appearance: none;
        outline: none;
        transition: background-color 0.3s;
    }

        .form-check.form-switch .form-check-input:checked {
            background-color: #007bff;
        }

        .form-check.form-switch .form-check-input::before {
            content: "";
            position: absolute;
            top: 0.140em;
            left: 0.125em;
            width: 0.9em;
            height: 0.9em;
            background-color: #fff;
            border-radius: 50%;
            transition: transform 0.3s;
        }

        .form-check.form-switch .form-check-input:checked::before {
            transform: translateX(1.2em);
        }

    .ds-from-child {
        color: #16a34a; /* Tailwind-ish green-600 */
        font-weight: 600;
    }
</style>


<div class="content">

    <div class="card">
        <div class="card-body d-flex justify-content-between align-items-center">
            <div style="font-size: large; color: #4682B4;">
                MTA
            </div>
            <!-- Back Button -->
            <div>
                <div class="ml-auto">
                    <button type="button" id="exportExcel" class="btn btn btn-outline-danger legitRipple" onclick="" style="margin: 1px 0px; width: 140px;font-size:14px">
                        <i class="fas fa-regular fa-file-excel mr-2"></i>Export Xl
                    </button>&nbsp;

                    <button id="backButton" class="btn btn-outline-warning legitRipple" onclick="location.href='@Url.Action("SCMMenu","Home")'" style="font-size:14px">
                        <i class="fas fa-arrow-left"></i> Back
                    </button>
                </div>

            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="chart-container">
                        <div class="form-group row">
                            <div id="summary_Table" class="col-12" "></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="deliveryScheduleModal" tabindex="-1" aria-labelledby="deliveryScheduleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-slideout modal-lg">
        <div class="modal-content">
            <div class="modal-header text-white" style="background:#4682B4;">
                <h5 class="modal-title" id="deliveryScheduleModalLabel">Delivery Schedule Asign</h5>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Close">Close</button>
            </div>

            <div class="modal-body">
                <input type="hidden" id="Key" />
                <input type="hidden" id="Key1" />

                <!-- PO Info -->
                <div class="border rounded p-3 bg-light mb-3 d-flex justify-content-between" style="font-size:larger">
                    <div><strong>SO No : </strong> <span id="lblSONo"></span></div>
                    <div><strong>SO Date : </strong> <span id="lblSODate"></span></div>
                    <div><strong>SO Qty : </strong> <span id="lblSOQty"></span></div>
                    <div><strong>Material : </strong> <span id="lblMaterial"></span></div>
                    <div><strong>Ref. No : </strong> <span id="lblRef_No"></span></div>
                </div>

                <!-- Tabulator delivery schedule table -->
                <div id="deliveryScheduleTable"></div>

                <div id="soToPODateAsignTable" class="mt-5"></div>

                <div class="mt-3">
                    <button type="button" class="btn btn-outline-primary legitRipple mr-2" onclick="addScheduleRow()" title="Add Delivery Schedule">
                        <i class="fas fa-plus fa-1x"></i>
                    </button>
                    <button class="btn btn-outline-success float-end" onclick="saveDeliverySchedule()">Save Schedule</button>
                </div>

            </div>
        </div>
    </div>
</div>

                            @section Scripts {
    <script src="~/js/select2.min.js"></script>
    <script>

             var tabledata = [];
             var summaryTable = '';
             var deliveryScheduleTable;
             var tabledatadelivery = [];
             var soDateAsigntable = [];
             window.PC_CAL = [];
             var soRowDataCache = {};
             var currentMainRowData = {};
             var selectedSoId = 0;

             $(document).ready(function () {

                 loadPCCalendar().always(function () {
                    loadSalesOrderSummary();
                 });
             });

            function clearForm() {
                // Clear all input fields
                document.querySelectorAll('.form-control').forEach(function (input) {
                    if (input.tagName === 'INPUT') {
                        if (input.type === 'hidden' || input.readOnly) {
                            // Skip hidden or readonly inputs
                            return;
                        }
                        input.value = ''; // Clear input value
                    } else if (input.tagName === 'SELECT') {
                        input.selectedIndex = 0; // Reset dropdown to first option
                    }
                });

                // Clear error messages if needed
                document.querySelectorAll('.text-danger').forEach(function (error) {
                    error.textContent = '';
                });
            }

            function parseAnyDate(input)
            {
                if (!input) return null;
                if (input instanceof Date) return isNaN(input) ? null : input;

                if (typeof input === 'string') {
                    // dd/MM/yyyy
                    let m = input.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/);
                    if (m) {
                        const d = parseInt(m[1], 10), mo = parseInt(m[2], 10) - 1, y = parseInt(m[3], 10);
                        const dt = new Date(y, mo, d);
                        return isNaN(dt) ? null : dt;
                    }
                    // yyyy-MM-dd
                    m = input.match(/^(\d{4})-(\d{2})-(\d{2})$/);
                    if (m) {
                        const y = parseInt(m[1], 10), mo = parseInt(m[2], 10) - 1, d = parseInt(m[3], 10);
                        const dt = new Date(y, mo, d);
                        return isNaN(dt) ? null : dt;
                    }
                    // last resort
                    const dt = new Date(input);
                    return isNaN(dt) ? null : dt;
                }
                return null;
            }

            function isBetweenInclusive(d, fromStr, toStr) {
                const from = parseAnyDate(fromStr);
                const to   = parseAnyDate(toStr);
                if (!d || !from || !to) return false;

                const dd = new Date(d.getFullYear(), d.getMonth(), d.getDate());
                const ff = new Date(from.getFullYear(), from.getMonth(), from.getDate());
                const tt = new Date(to.getFullYear(), to.getMonth(), to.getDate());
                return dd >= ff && dd <= tt;
            }

            function getPCWeekCodeForDate(anyDate) {
                const d = parseAnyDate(anyDate);
                if (!d || !Array.isArray(window.PC_CAL) || window.PC_CAL.length === 0) return "";
                const hit = window.PC_CAL.find(r => isBetweenInclusive(d, r.from, r.to));
                if (!hit) return "";
                return `PC${hit.pc}WK${hit.week}`;
            }

            function loadPCCalendar() {
              // IMPORTANT: return the jqXHR
              return $.ajax({
               url: '@Url.Action("GetPCCalendar", "OpenPo")',
                type: 'GET',
                dataType: 'json'
              }).done(function (pcRaw) {
                window.PC_CAL = (pcRaw || []).map(r => ({
                  pc:   r.pc ?? r.PC ?? r.Pc ?? r.pC,
                  week: r.week ?? r.Week,
                  from: r.from ?? r.FROM ?? r.From,
                  to:   r.to   ?? r.TO   ?? r.To
                })).filter(x => x.pc && x.week && x.from && x.to);
              }).fail(function (xhr, status, err) {
                console.warn('PC Calendar load failed:', status, err, xhr?.responseText);
                window.PC_CAL = []; // fail-soft
              });
            }


            function loadSalesOrderSummary() {
                debugger
                Blockloadershow();
                var selectedType = 'MTA';
                $.ajax({
                    url: '@Url.Action("GetSalesOrderAll", "OpenPo")',
                    method: 'GET',
                    data: { type: selectedType },
                    success: function(response)
                    {
                        Blockloaderhide();
                        tabledata = [];

                         var myList = response.soHeaders || [];
                         var allTS = response.deliverySchedules || [];

                        if (myList.length > 0) {

                            function formatDate(value) {
                                    return value ? new Date(value).toLocaleDateString("en-GB") : "";
                            }

                            $.each(myList, function (index, item) {
                                tabledata.push({
                                    Sr_No: index + 1,
                                    Key: item.key,
                                    Key1: item.key1,
                                    Id: item.id,
                                    Item_Category: item.item_Category,
                                    SO_No: item.sO_No,
                                    SaleOrder_Type: item.saleOrder_Type,
                                    SO_Date: formatDate(item.sO_Date),
                                    Line_Item: item.line_Item,
                                    Indent_No: item.indent_No,
                                    Indent_Date: formatDate(item.indent_Date),
                                    Sales_Group: item.sales_Group,
                                    Sales_Group_desc: item.sales_Group_desc,
                                    Sales_Office: item.sales_Office,
                                    Sales_Office_Desc: item.sales_Office_Desc,
                                    Sale_Person: item.sale_Person,
                                    Project_Name: item.project_Name,
                                    Customer_Name: item.customer_Name,
                                    Customer_Code: item.customer_Code,
                                    Material: item.material,
                                    Old_Material_No: item.old_Material_No,
                                    Description: item.description,
                                    SO_Qty: item.sO_Qty,
                                    SO_Value: item.sO_Value,
                                    Del_Qty: item.del_Qty,
                                    Open_Sale_Qty: item.open_Sale_Qty,
                                    Opne_Sale_Value: item.opne_Sale_Value,
                                    Plant: item.plant,
                                    Procurement_Type: item.procurement_Type,
                                    Vendor_Po_No: item.vendor_Po_No,
                                    Vendor_Po_Date: formatDate(item.vendor_Po_Date),
                                    Po_Release_Qty: item.po_Release_Qty,
                                    Allocated_Stock_Qty: item.allocated_Stock_Qty,
                                    Allocated_Stock_Value: item.allocated_Stock_Value,
                                    Net_Qty: item.net_Qty,
                                    Net_Value: item.net_Value,
                                    Indent_Status: item.indent_Status,
                                    Delivery_Schedule: item.delivery_Schedule,
                                    Delivert_Date: formatDate(item.delivert_Date),
                                    Readiness_Schedule_Vendor_Released: item.readiness_Schedule_Vendor_Released,
                                    Schedule_Line_Qty1: item.schedule_Line_Qty1,
                                    Schedule_Line_Date1: formatDate(item.schedule_Line_Date1),
                                    Schedule_Line_Qty2: item.schedule_Line_Qty2,
                                    Schedule_Line_Date2: formatDate(item.schedule_Line_Date2),
                                    Schedule_Line_Qty3: item.schedule_Line_Qty3,
                                    Schedule_Line_Date3: formatDate(item.schedule_Line_Date3),
                                    _children: []
                                });
                            });

                            // Add child rows from Table2 (allTS)
                            $.each(allTS, function () {
                                var parentRow = tabledata.find(row => row.Id === this.saleOrder_Id);

                                if (parentRow) {

                                    if (!parentRow._childrenHeaderAdded) {
                                       parentRow._children.unshift({
                                         _isChildHeader: true,
                                         Delivery_Schedule: "Delivery Date",
                                         Open_Sale_Qty: "Date PC Week",
                                         Opne_Sale_Value: "Qty",
                                         Allocated_Stock_Qty: "Remark"
                                       });
                                       parentRow._childrenHeaderAdded = true;
                                    }

                                    parentRow._children.push({
                                        SoDelSchu_Id: this.id, // pick what your API returns
                                        SaleOrder_Id: this.saleOrder_Id,
                                        Delivery_Schedule:formatDate(this.delivery_Date),
                                        Open_Sale_Qty: this.date_PC_Week,
                                        Opne_Sale_Value:this.delivery_Qty,
                                        Allocated_Stock_Qty:this.delivery_Remark
                                    });
                                }
                            });
                        }

                        window.PendTSTableData = JSON.parse(JSON.stringify(tabledata));

                    summaryTable = new Tabulator("#summary_Table", {
                            data: window.PendTSTableData,
                            layout: "fitDataFill",
                            index: "Id",
                            renderHorizontal: "virtual",
                            movableColumns: true, // Allow column reordering
                            pagination: "local", // Enable pagination
                            paginationSize: 10, // Rows per page
                            paginationSizeSelector: [50, 100, 500, 1500, 2000],
                            paginationCounter: "rows",
                            dataTree: true,
                            dataTreeStartExpanded: true,
                            dataTreeChildField: "_children",
                            dataTreeFilter: false,
                            // placeholder: "No data available",
                            dataEmpty: "<div style='text-align: center; font-size: 1rem; color: gray;'>No data available</div>", // Placeholder message
                            columns: [
                                { title: "Sr No",formatter: "rownum",hozAlign: "center",headerSort: false,width: 70 },
                                { title: "Item Category", field: "Item_Category", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center" },
                                { title: "SO No", field: "SO_No", headerMenu: headerMenu,headerFilter: "input",hozAlign: "left",headerHozAlign: "left" },
                                { title: "Sale Order Type", field: "SaleOrder_Type", headerMenu: headerMenu,headerFilter: "input",hozAlign: "left",headerHozAlign: "left",visible: false },
                                { title: "SO Date", field: "SO_Date", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center" },
                                { title: "Line Item", field: "Line_Item", headerMenu: headerMenu,headerFilter: "input",hozAlign: "left",headerHozAlign: "left",visible: false },
                                { title: "Indent No", field: "Indent_No", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center",visible: false },
                                { title: "Indent_Date", field: "Indent_Date", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center",visible: false },
                                { title: "Sales_Group", field: "Sales_Group", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center",visible: false },
                                { title: "Sales_Group_desc", field: "Sales_Group_desc", headerMenu: headerMenu,headerFilter: "input",hozAlign: "left",headerHozAlign: "left",visible: false },
                                { title: "Sales Office", field: "Sales_Office", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center",visible: false },
                                { title: "Sales_Office_Desc", field: "Sales_Office_Desc", headerMenu: headerMenu,headerFilter: "input",hozAlign: "left",headerHozAlign: "left",visible: false },
                                { title: "Sale Person", field: "Sale_Person", headerMenu: headerMenu,headerFilter: "input",hozAlign: "left",headerHozAlign: "left",visible: false },
                                { title: "Project Name", field: "Project_Name", headerMenu: headerMenu,headerFilter: "input",hozAlign: "left",headerHozAlign: "left",visible: false },
                                { title: "Customer Code", field: "Customer_Code", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center",visible: false },
                                { title: "Customer Name", field: "Customer_Name", headerMenu: headerMenu,headerFilter: "input",hozAlign: "left",headerHozAlign: "left" },
                                { title: "Material", field: "Material",headerMenu: headerMenu,headerFilter: "input",hozAlign: "left",headerHozAlign: "left" },
                                { title: "Old Material No", field: "Old_Material_No", headerMenu: headerMenu,headerFilter: "input",hozAlign: "left",headerHozAlign: "left" },
                                { title: "Description", field: "Description", headerMenu: headerMenu,headerFilter: "input",hozAlign: "left",headerHozAlign: "left" },
                                { title: "SO Qty", field: "SO_Qty", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center" },
                                { title: "SO Value", field: "SO_Value", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center" },
                                { title: "Del Qty", field: "Del_Qty", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center" },
                                // { title: "Delivery Schedule", field: "Delivery_Schedule", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center" },

                                // {
                                //   title: "Delivery Schedule",
                                //   field: "Delivery_Schedule",
                                //   headerMenu: headerMenu,
                                //   headerFilter: "input",
                                //   hozAlign: "center",
                                //   headerHozAlign: "center",
                                //   sorter: function (a, b, aRow, bRow, column, dir, sorterParams) {
                                //     function parseDateLike(val) {
                                //       if (val == null) return 0;
                                //       const s = String(val).trim();
                                //       if (!s) return 0;

                                //       // DD/MM/YYYY
                                //       const ddmmyyyy = /^(\d{2})\/(\d{2})\/(\d{4})$/;
                                //       const m = s.match(ddmmyyyy);
                                //       if (m) {
                                //         const d = new Date(+m[3], +m[2] - 1, +m[1]);
                                //         return isNaN(d.getTime()) ? 0 : d.getTime();
                                //       }
                                //       // Fallback to Date.parse for ISO or other parseable strings
                                //       const t = Date.parse(s);
                                //       return isNaN(t) ? 0 : t;
                                //     }

                                //     function latestFromChildren(row) {
                                //       const kids = row?.getTreeChildren?.() || [];
                                //       let max = 0;
                                //       for (const r of kids) {
                                //         const d = r.getData();
                                //         // Try both possible fields
                                //         const ts = Math.max(
                                //           parseDateLike(d?.Delivery_Date),
                                //           parseDateLike(d?.Delivery_Schedule)
                                //         );
                                //         if (ts > max) max = ts;
                                //       }
                                //       return max;
                                //     }

                                //     const aIsParent = !!(aRow?.getTreeChildren?.()?.length);
                                //     const bIsParent = !!(bRow?.getTreeChildren?.()?.length);

                                //     const av = aIsParent ? latestFromChildren(aRow) : parseDateLike(a);
                                //     const bv = bIsParent ? latestFromChildren(bRow) : parseDateLike(b);

                                //     return av - bv;
                                //   },

                                //   formatter: function (cell) {
                                //     const row = cell.getRow();
                                //     const data = row.getData();
                                //     const isChild = !!row.getTreeParent?.();

                                //     //Child rows: show value (or blank if suppressed)
                                //     if (isChild) {
                                //       // if (data?.SuppressChildDelivery === true) return "";
                                //       return data?.Delivery_Schedule || data?.Delivery_Date || "";
                                //     }


                                //     function parseDateString(str)
                                //     {
                                //         const parts = str?.split("/");
                                //         if (parts?.length === 3) {
                                //             const day = parseInt(parts[0], 10);
                                //             const month = parseInt(parts[1], 10) - 1;
                                //             const year = parseInt(parts[2], 10);
                                //             return new Date(year, month, day);
                                //         }
                                //         return null;
                                //     }

                                //     if (data.Id)
                                //     {
                                //         let latestDate = "";

                                //         const children = row.getTreeChildren();
                                //         if (children.length > 0) {
                                //             const dates = children
                                //                 .map(childRow => {
                                //                     const childData = childRow.getData();
                                //                     return parseDateString(childData.Delivery_Date);
                                //                 })
                                //                 .filter(date => date instanceof Date && !isNaN(date));

                                //             if (dates.length > 0) {
                                //                 const maxDate = new Date(Math.max(...dates));
                                //                 latestDate = ` ${maxDate.toLocaleDateString("en-GB")}`;
                                //             }
                                //         }
                                //         // Parent rows: show span + calendar icon
                                //         const shown = data?.Delivery_Schedule ? String(data.Delivery_Schedule) : "";
                                //         const safeId = JSON.stringify(data?.Id ?? null);

                                //         return `
                                //           <div style="display:flex; align-items:center; justify-content:space-between;">
                                //             <span style="flex:1; text-align:center; font-weight:600; color:#59C3C3;">${shown}</span>
                                //             <i class="fa-regular fa-calendar-days"
                                //                title="Manage Delivery Schedule"
                                //                style="cursor:pointer; font-size:18px;"
                                //                onclick="openDeliverySchedule(${safeId})">
                                //             </i>
                                //           </div>`;
                                //       }
                                //   },
                                // },
                                         {
                                  title: "Delivery Schedule",
                                  field: "Delivery_Schedule",
                                  headerMenu: headerMenu,
                                  headerFilter: "input",
                                  hozAlign: "center",
                                  headerHozAlign: "center",

                                  sorter: function (a, b, aRow, bRow) {
                                    function parseDateLike(val) {
                                      if (val == null) return 0;
                                      const s = String(val).trim();
                                      if (!s) return 0;
                                      const parts = s.split("|").map(p => p.trim()).filter(Boolean);
                                      let best = 0;
                                      for (const piece of (parts.length ? parts : [s])) {
                                        const m = piece.match(/^(\d{2})\/(\d{2})\/(\d{4})$/); // DD/MM/YYYY
                                        if (m) {
                                          const d = new Date(+m[3], +m[2] - 1, +m[1]);
                                          if (!isNaN(d.getTime())) best = Math.max(best, d.getTime());
                                          continue;
                                        }
                                        const t = Date.parse(piece); // ISO/native
                                        if (!isNaN(t)) best = Math.max(best, t);
                                      }
                                      return best;
                                    }

                                    function latestFromChildren(row) {
                                      const kids = row?.getTreeChildren?.() || [];
                                      let max = 0;
                                      for (const r of kids) {
                                        const d = r.getData();
                                        max = Math.max(
                                          max,
                                          parseDateLike(d?.Delivery_Date),
                                          parseDateLike(d?.Delivery_Schedule)
                                        );
                                      }
                                      return max;
                                    }

                                    const aIsParent = !!(aRow?.getTreeChildren?.()?.length);
                                    const bIsParent = !!(bRow?.getTreeChildren?.()?.length);
                                    const av = aIsParent ? latestFromChildren(aRow) : parseDateLike(a);
                                    const bv = bIsParent ? latestFromChildren(bRow) : parseDateLike(b);
                                    return av - bv;
                                  },

                                  formatter: function (cell) {
                                    const row = cell.getRow();
                                    const data = row.getData();
                                    const isChild = !!row.getTreeParent?.();

                                    // Child rows: show their own value (or blank if suppressed)
                                    if (isChild) {
                                      if (data?.SuppressChildDelivery === true) return "";
                                      return data?.Delivery_Schedule || data?.Delivery_Date || "";
                                    }

                                    // --- parent rows: compute latest from children ---
                                    function parseOneDate(piece) {
                                      const s = (piece || "").trim();
                                      if (!s) return NaN;
                                      const m = s.match(/^(\d{2})\/(\d{2})\/(\d{4})$/);
                                      if (m) {
                                        const dt = new Date(+m[3], +m[2] - 1, +m[1]);
                                        return dt.getTime();
                                      }
                                      const t = Date.parse(s);
                                      return isNaN(t) ? NaN : t;
                                    }

                                    function toGBDate(ts) {
                                      if (!ts || isNaN(ts)) return "";
                                      return new Date(ts).toLocaleDateString("en-GB");
                                    }

                                    function latestFromString(str) {
                                      if (!str) return NaN;
                                      const parts = String(str).split("|").map(p => p.trim()).filter(Boolean);
                                      let best = NaN;
                                      for (const p of (parts.length ? parts : [str])) {
                                        const t = parseOneDate(p);
                                        if (!isNaN(t)) best = isNaN(best) ? t : Math.max(best, t);
                                      }
                                      return best;
                                    }

                                    function latestChildTs() {
                                      const children = row.getTreeChildren?.() || [];
                                      let best = NaN;
                                      for (const cr of children) {
                                        const cd = cr.getData();
                                        const t1 = latestFromString(cd?.Delivery_Date);
                                        const t2 = latestFromString(cd?.Delivery_Schedule);
                                        const t = isNaN(t1) ? t2 : isNaN(t2) ? t1 : Math.max(t1, t2);
                                        if (!isNaN(t)) best = isNaN(best) ? t : Math.max(best, t);
                                      }
                                      return best;
                                    }

                                    // 1) latest child date?
                                    const childTs = latestChildTs();

                                    // 2) fallback to parent’s own date(s)
                                    const parentTs = (function () {
                                      const t1 = latestFromString(data?.Delivery_Schedule);
                                      const t2 = latestFromString(data?.Delivery_Date);
                                      if (!isNaN(t1) || !isNaN(t2)) {
                                        return isNaN(t1) ? t2 : isNaN(t2) ? t1 : Math.max(t1, t2);
                                      }
                                      return NaN;
                                    })();

                                    // Build display text
                                    const displayText = !isNaN(childTs)
                                      ? toGBDate(childTs)                                 // latest child date
                                      : (data?.Delivery_Schedule || data?.Delivery_Date   // fallback raw
                                         || toGBDate(parentTs) || "");

                                    // ---- NEW: toggle row color when value comes from child ----
                                    const el = row.getElement();
                                    if (!isNaN(childTs)) {
                                      el.classList.add("ds-from-child");   // whole row turns green
                                    } else {
                                      el.classList.remove("ds-from-child");
                                    }

                                    const safeId = JSON.stringify(data?.Id ?? null);

                                    return `
                                      <div style="display:flex; align-items:center; justify-content:space-between;">
                                        <span style="flex:1; text-align:center;">${displayText}</span>
                                        <i class="fa-regular fa-calendar-days"
                                           title="Manage Delivery Schedule"
                                           style="cursor:pointer; font-size:18px;"
                                           onclick="openDeliverySchedule(${safeId})">
                                        </i>
                                      </div>`;
                                  },
                                },

                                { title: "Open Sale Qty", field: "Open_Sale_Qty", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center" },
                                { title: "Opne Sale Value", field: "Opne_Sale_Value", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center" },
                                { title: "Allocated Stock Qty", field: "Allocated_Stock_Qty", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center" },
                                { title: "Allocated Stock Value", field: "Allocated_Stock_Value", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center" },
                                { title: "Net Qty", field: "Net_Qty", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center" },
                                { title: "Net Value", field: "Net_Value", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center" },
                                { title: "Plant", field: "Plant", headerMenu: headerMenu,headerFilter: "input",hozAlign: "left",headerHozAlign: "left",visible: false },
                                { title: "Procurement_Type", field: "Procurement_Type", headerMenu: headerMenu,headerFilter: "input",hozAlign: "left",headerHozAlign: "left",visible: false },
                                { title: "Vendor Po No", field: "Vendor_Po_No", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center",visible: false },
                                { title: "Vendor Po Date", field: "Vendor_Po_Date", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center" ,visible: false},
                                { title: "Po Release Qty", field: "Po_Release_Qty", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center",visible: false },
                                { title: "Indent Status", field: "Indent_Status", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center",visible: false },
                                { title: "Delivery Date", field: "Delivert_Date", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center",visible: false },
                                { title: "Readiness Schedule Vendor Released", field: "Readiness_Schedule_Vendor_Released", headerMenu: headerMenu,headerFilter: "input",hozAlign: "left",headerHozAlign: "left" },
                                { title: "Schedule_Line_Qty1", field: "Schedule_Line_Qty1", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center",visible: false },
                                { title: "Schedule_Line_Date1", field: "Schedule_Line_Date1", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center",visible: false },
                                { title: "Schedule_Line_Qty2", field: "Schedule_Line_Qty2", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center",visible: false },
                                { title: "Schedule_Line_Date2", field: "Schedule_Line_Date2", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center",visible: false },
                                { title: "Schedule_Line_Qty3", field: "Schedule_Line_Qty3", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center",visible: false },
                                { title: "Schedule_Line_Date3", field: "Schedule_Line_Date3", headerMenu: headerMenu,headerFilter: "input",hozAlign: "center",headerHozAlign: "center",visible : false },
                                { title: "Id", field: "Id",visible : false },

                            ],

                            rowFormatter: function(row){
                               const d = row.getData();
                               if (d._isChildHeader) {
                                 const el = row.getElement();
                                 el.style.fontWeight = "700";
                                 el.style.background = "#f1f5f9";
                                 // el.style.borderLeft = "3px solid #94a3b8";
                                 // Disable hover/edit/etc.
                                 row.getCells().forEach(c => {
                                   c.getElement().style.pointerEvents = "none";
                                 });
                               }
                            },
                        });
                    }
                });
            }

            var headerMenu = function () {
                var menu = [];
                var columns = this.getColumns();

                for (let column of columns) {

                    //create checkbox element using font awesome icons
                    let icon = document.createElement("i");
                    icon.classList.add("fas");
                    icon.classList.add(column.isVisible() ? "fa-check-square" : "fa-square");

                    //build label
                    let label = document.createElement("span");
                    let title = document.createElement("span");

                    title.textContent = " " + column.getDefinition().title;

                    label.appendChild(icon);
                    label.appendChild(title);

                    //create menu item
                    menu.push({
                        label: label,
                        action: function (e) {
                            //prevent menu closing
                            e.stopPropagation();

                            //toggle current column visibility
                            column.toggle();

                            //change menu item icon
                            if (column.isVisible()) {
                                icon.classList.remove("fa-square");
                                icon.classList.add("fa-check-square");
                            } else {
                                icon.classList.remove("fa-check-square");
                                icon.classList.add("fa-square");
                            }
                        }
                    });
                }

                return menu;
            };

                function openDeliverySchedule(id) {
                    debugger;
                    Blockloadershow();

                const row = summaryTable.getRow(id).getData();

                    selectedSoId = id;
                    currentMainRowData = row;
                    soRowDataCache[id] = row;

                    $("#lblSONo").text(row.SO_No);
                    $("#lblSODate").text(row.SO_Date);
                    $("#lblSOQty").text(row.SO_Qty);
                    $("#lblMaterial").text(row.Material);
                    $("#lblRef_No").text(row.Old_Material_No);
                    $("#Key").val(row.Key);
                    $("#Key1").val(row.Key1);

                    var mate = row.Material || null;
                    var oldMate= row.Old_Material_No || null;
                    var soId = id;

                   $("#deliveryScheduleModal").modal('show');

                    $.ajax({
                        url: '@Url.Action("GetPODeliDateByMatrialRefNo", "OpenPo")',
                        type: 'GET',
                        data: { material: mate,oldMaterialNo:oldMate,soId:soId },
                        success: function (data) {
                            Blockloaderhide();
                            if (data && (Array.isArray(data.poResponse) || Array.isArray(data.soResponse))) {
                                loadDeliveryScheduleTable(data.poResponse || [],data.soResponse || []);
                            } else {
                                loadDeliveryScheduleTable([]); // show empty table if no delivery schedule found
                            }
                        }
                    });
                }

                function moveToNextHorizontalCell(e, cell) {
                    if (e.key === "Enter") {
                        e.preventDefault();

                        var row = cell.getRow();
                        var cells = row.getCells();
                        var currentIndex = cells.indexOf(cell);

                        // Move to the next cell in the same row
                        var nextCell = cells[currentIndex + 1];

                        // If no more columns in this row, move to first editable cell in next row
                        if (!nextCell) {
                            var nextRow = row.getNextRow();
                            if (nextRow) {
                                nextCell = nextRow.getCells()[0]; // first cell of next row
                            }
                        }

                        if (nextCell) {
                            nextCell.edit();
                        }
                    }
                }

                function loadDeliveryScheduleTable(response, soResponse) {
                    debugger

                    // function toISODate(d) {
                    //     if (!d) return "";
                    //     const dt = new Date(d);
                    //     dt.setHours(0,0,0,0);
                    //     const y = dt.getFullYear();
                    //     const m = String(dt.getMonth()+1).padStart(2,"0");
                    //     const dd = String(dt.getDate()).padStart(2,"0");
                    //     return `${y}-${m}-${dd}`;
                    // }

                    // function todayISO(){
                    //     const t = new Date();
                    //     t.setHours(0,0,0,0);
                    //     const y = t.getFullYear();
                    //     const m = String(t.getMonth()+1).padStart(2,'0');
                    //     const d = String(t.getDate()).padStart(2,'0');
                    //     return `${y}-${m}-${d}`;
                    // }

                    function toISODate(d) {
                        if (!d) return "";
                        const dt = new Date(d);
                        dt.setHours(0,0,0,0);
                        const y = dt.getFullYear();
                        const m = String(dt.getMonth()+1).padStart(2,"0");
                        const dd = String(dt.getDate()).padStart(2,"0");
                        return `${y}-${m}-${dd}`;
                    }

                    function todayISO(){
                      const t = new Date();
                      t.setHours(0,0,0,0);
                      const y = t.getFullYear();
                      const m = String(t.getMonth()+1).padStart(2,"0");
                      const d = String(t.getDate()).padStart(2,"0");
                      return `${y}-${m}-${d}`;
                    }

                    function isPastISO(iso){
                      if(!iso) return false;
                      const picked = new Date(iso);
                      const t = new Date(); t.setHours(0,0,0,0);
                      return picked < t;
                    }

                    let tabledatadelivery = [];
                    let soDataAsign = [];

                    if (response.length > 0) {
                        $.each(response, function (index, item) {

                            function formatDate(value) {
                                return value ? new Date(value).toLocaleDateString("en-GB") : "";
                            }

                        tabledatadelivery.push({
                                SrNo: index + 1,
                                Vendor: item.vendor,
                                PO_No: item.pO_No,
                                PO_Date: formatDate(item.pO_Date),
                                PO_Qty: item.pO_Qty,
                                Balance_Qty: item.balance_Qty,
                                Delivery_Date: formatDate(item.delivery_Date),
                                Date_PC_Week : item.date_PC_Week,
                                Delivery_Qty: item.delivery_Qty,
                                Delivery_Remark: item.delivery_Remark,
                                Reference_No: item.reference_No,
                                PO_Material: item.pO_Material,
                                Remaining_Qty: item.remaining_Qty,
                            });
                        });
                    }

                    deliveryScheduleTable = new Tabulator("#deliveryScheduleTable", {
                    data: tabledatadelivery,
                    layout: "fitDataFill",
                        columns: [
                            { title: "Sr No.", field: "SrNo", width: 48 ,hozAlign: "center", headerHozAlign: "center"},
                            { title: "Delivery Date", field: "Delivery_Date",hozAlign: "center",headerHozAlign: "center"},
                            { title: "PC Date", field: "Date_PC_Week", editor: false, width: 105 ,hozAlign: "center", headerHozAlign: "center"},
                            { title: "Qty", field: "Delivery_Qty", editor: "number", width: 80 ,hozAlign: "center", headerHozAlign: "center"},
                            { title: "Remaining Qty", field: "Remaining_Qty", editor: "number", width: 150 ,hozAlign: "center", headerHozAlign: "center"},
                            { title: "Remark", field: "Delivery_Remark", editor: "input",hozAlign: "left", headerHozAlign: "left"},
                            { title: "PO No", field: "PO_No", hozAlign: "center",headerHozAlign: "center"},
                            { title: "PO Date", field: "PO_Date", hozAlign: "center",headerHozAlign: "center"},
                            { title: "PO Qty", field: "PO_Qty", hozAlign: "center",headerHozAlign: "center"},
                            { title: "Bal.Qty", field: "Balance_Qty", hozAlign: "center",headerHozAlign: "center"},
                            { title: "Vendor", field: "Vendor", hozAlign: "left",headerHozAlign: "center"},
                            { title: "Material", field: "PO_Material", editor: "input", hozAlign: "left", headerHozAlign: "left"},
                            { title: "Reference No", field: "Reference_No", editor: "input", hozAlign: "left", headerHozAlign: "left"}
                        ],
                    });

                if (soResponse.length > 0) {
                    $.each(soResponse[0].soDeliveryScheduleList, function (index, item) {

                        function formatDate(value) {
                            return value ? new Date(value).toLocaleDateString("en-GB") : "";
                        }

                        soDataAsign.push({
                            SrNo: index + 1,
                            Delivery_Date: toISODate(item.delivery_Date),  // Assuming delivery_Date comes as raw datetime
                            Delivery_Qty: item.delivery_Qty,
                            Delivery_Remark: item.delivery_Remark,
                            Date_PC_Week : item.date_PC_Week || getPCWeekCodeForDate(toISODate(item.delivery_Date))
                        });
                    });
                }

                soDateAsigntable = new Tabulator("#soToPODateAsignTable", {
                data: soDataAsign,
                layout: "fitColumns",
                columns: [
                    { title: "Sr No.", field: "SrNo", width: 48 ,hozAlign: "center", headerHozAlign: "center"},
                    // {
                    //     title: "Date",
                    //     field: "Delivery_Date",
                    //     width: 110,
                    //     hozAlign: "center",
                    //     headerHozAlign: "center",

                    //     // custom editor: <input type="date">
                    //     editor: function(cell, onRendered, success, cancel){
                    //       const value = cell.getValue() || "";
                    //       const input = document.createElement("input");
                    //       input.type = "date";
                    //       input.value = value;
                    //       input.min = todayISO(); // blocks past dates
                    //       input.style.width = "100%";

                    //         onRendered(function(){
                    //             input.focus();
                    //             input.addEventListener("blur", () => success(input.value));
                    //             input.addEventListener("keydown", (e) => {
                    //               if(e.key === "Enter") { e.preventDefault(); input.blur(); }
                    //               if(e.key === "Escape") cancel();
                    //             });
                    //         });

                    //       return input;
                    //     },

                    //     // custom formatter for DD/MM/YYYY
                    //     formatter: function(cell){
                    //       const v = cell.getValue();
                    //       if(!v) return "";
                    //       const [y,m,d] = v.split("-");
                    //       return `${d}/${m}/${y}`;
                    //     },

                    //     // guard when user types via keyboard
                    //     validator: function(cell, value){
                    //       if(!value) return true;
                    //       const picked = new Date(value);
                    //       const t = new Date(); t.setHours(0,0,0,0);
                    //       return picked >= t;
                    //     },

                    //     cellEditing: function (cell) {
                    //         cell.getElement().addEventListener("keydown", function (e) {
                    //             moveToNextHorizontalCell(e, cell);
                    //         });
                    //     }
                    // },

                    {
                      title: "Date",
                      field: "Delivery_Date",
                      width: 110,
                      hozAlign: "center",
                      headerHozAlign: "center",

                      // Editor: <input type="date"> with NO min/max restriction
                        editor: function(cell, onRendered, success, cancel){
                          const value = cell.getValue() || "";
                          const input = document.createElement("input");
                          input.type = "date";
                          input.value = value;
                          input.style.width = "100%";

                          function commit(){
                            // allow blank or any valid date (past/future)
                            success(input.value || "");
                          }

                          onRendered(function(){
                            input.focus();
                            input.addEventListener("blur", commit);
                            input.addEventListener("keydown", (e) => {
                              if (e.key === "Enter"){ e.preventDefault(); commit(); }
                              if (e.key === "Escape"){ cancel(); }
                            });
                          });

                          return input;
                        },

                        // Display as DD/MM/YYYY
                        formatter: function(cell){
                          const v = cell.getValue();
                          if(!v) return "";
                          const [y,m,d] = v.split("-");
                          return `${d}/${m}/${y}`;
                        },

                        // Accept all values (no validation needed). You can omit this line too.
                        validator: true,

                        // Keep your keyboard nav
                        cellEditing: function (cell) {
                          cell.getElement().addEventListener("keydown", function (e) {
                            // assumes you already have this helper in your codebase
                            moveToNextHorizontalCell(e, cell);
                          });
                        },

                        // OPTIONAL: visually mark past dates (does NOT block them)
                        cellEdited: function(cell){
                          const v = cell.getValue();
                          const el = cell.getElement();
                          el.classList.remove("past-date");
                          if (v) {
                            const picked = new Date(v);
                            const t = new Date(); t.setHours(0,0,0,0);
                            if (picked < t) el.classList.add("past-date"); // soft highlight
                          }
                        }

                    },
                    { title: "PC Date", field: "Date_PC_Week", editor: false, width: 105 ,hozAlign: "center", headerHozAlign: "center"},
                    { title: "Qty", field: "Delivery_Qty", editor: "number", width: 80 ,hozAlign: "center", headerHozAlign: "center",
                        cellEditing: function (cell) {
                                cell.getElement().addEventListener("keydown", function (e) {
                                    moveToNextHorizontalCell(e, cell);
                                });
                        }
                    },
                    { title: "Remark", field: "Delivery_Remark", editor: "input", width: 455,hozAlign: "left", headerHozAlign: "left",
                        cellEditing: function (cell) {
                                cell.getElement().addEventListener("keydown", function (e) {
                                    moveToNextHorizontalCell(e, cell);
                                });
                        }
                    },
                    {
                        title: "Action", width: 60,hozAlign: "center", headerHozAlign: "center",
                        formatter: function () {
                            return `<i data-toggle="modal" class="fas fa-trash-alt mr-2 fa-1x" title="Delete" style="color:red;cursor:pointer;margin-left: 5px;"></i>`;
                        },
                        cellClick: function(e, cell) {
                            cell.getRow().delete();
                            renumberSrNo();
                        }
                    }
                ],


            });

            soDateAsigntable.on("cellEdited", function (cell) {
                const field = cell.getColumn().getField();
                if (field === "Delivery_Date") {
                  recomputePCWeekForRow(cell.getRow());
                }
            });


        }


        function recomputePCWeekForRow(row){
          const d = row.getData().Delivery_Date; // "yyyy-MM-dd"
          const code = d ? getPCWeekCodeForDate(d) : "";
          const cell = row.getCell("Date_PC_Week");
          if (cell) cell.setValue(code);
        }

        function renumberSrNo() {
            const rows = deliveryScheduleTable.getRows();
            rows.forEach((row, index) => {
                row.update({ SrNo: index + 1 });
            });
        }

        function addScheduleRow() {
            let rowCount = soDateAsigntable.getDataCount() + 1;
            soDateAsigntable.addRow(
                { SrNo: rowCount, Delivery_Date: "",Date_PC_Week:"", Delivery_Qty: 0, Delivery_Remark: "" },
                     false, // Scroll to row = false (optional)
                    "bottom" // <- Ensures row is added at the bottom
                    ).then((row) => {
                        setTimeout(() => {
                    // Edit the Delivery_Date cell (date editor)
                    row.getCell("Delivery_Date").edit();

                    // Wait a bit to ensure the input is visible and focusable
                    setTimeout(() => {
                        // Try to trigger the calendar pop-up (HTML5 date picker)
                        const dateInput = document.querySelector('.tabulator-editing input[type="date"]');

                        if (dateInput) {
                            dateInput.focus();            // Ensure input is focused
                            dateInput.click();            // Trigger click to open calendar
                            dateInput.showPicker?.();     // Try modern browser support for opening picker
                        }
                    }, 100); // Inner delay after edit() call
                }, 100); // Outer delay after row rendering
            });
        }

        function saveDeliverySchedule() {
            debugger
            Blockloadershow();


            function toIsoDate(value) {
                if (!value || value === "" || value === "Invalid Date") return null;

                if (typeof value === "string" && value.includes("/")) {
                    const parts = value.split("/");
                    if (parts.length === 3) {
                        const [day, month, year] = parts;
                        return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
                    }
                }

                const parsed = new Date(value);
                return isNaN(parsed.getTime()) ? null : parsed.toISOString().substring(0, 10);
            }

            const data = soDateAsigntable.getData() || [];
            const headerData = soRowDataCache[selectedSoId] || {};
            const soQty = parseFloat(headerData.SO_Qty) || 0;

            // --- Basic validations ---
            for (let i = 0; i < data.length; i++) {
                const row = data[i];

                // Remarks mandatory if Delivery_Date is blank
                if (!row.Delivery_Date && (!row.Delivery_Remarks || String(row.Delivery_Remarks).trim() === "")) {
                    Blockloaderhide();
                    showDangerAlert(`Row ${i + 1}: Remarks are mandatory if Delivery Date is blank.`);
                    return;
                }

                // Qty must be numeric and >= 0 (allow 0 for remark-only/date-only rows)
                if (row.Delivery_Qty !== undefined && row.Delivery_Qty !== null && String(row.Delivery_Qty).trim() !== "") {
                    const qty = parseFloat(row.Delivery_Qty);
                    if (isNaN(qty) || qty < 0) {
                        Blockloaderhide();
                        showDangerAlert(`Row ${i + 1}: Delivery Quantity must be a number ≥ 0.`);
                        return;
                    }
                }
            }

            // --- Collect non-zero qty rows & totals ---
            const nonZeroRows = [];
            let totalQty = 0;

            for (let i = 0; i < data.length; i++) {
                const q = parseFloat(data[i].Delivery_Qty);
                if (!isNaN(q) && q > 0) {
                    nonZeroRows.push({ index: i + 1, qty: q });
                    totalQty += q;
                }
            }

            // Rule 1: Single-entry case must equal balance
            if (nonZeroRows.length === 1) {
                const only = nonZeroRows[0];
                if (only.qty !== soQty) {
                    Blockloaderhide();
                    showDangerAlert(

                        // Delivery Qty 150 must be equal to PO Bal.Qty 250. Add more Delivery Qty to save the schedule.
                        // `Row ${only.index}: Since only one delivery is entered, its quantity must equal Balance Quantity ` +
                        // `(${balanceQty.toFixed(2)}). You entered ${only.qty.toFixed(2)}.`
                        `Delivery Qty ${(+only.qty).toFixed(0)} must be equal to SO Qty ${(+soQty).toFixed(0)}. Add more Delivery Qty to save the schedule.`
                    );
                    return;
                }
            }

            // (Optional guard: total should not exceed PO Qty)
            if (totalQty > soQty) {
                Blockloaderhide();
                showDangerAlert(`Total Delivery Quantity (${totalQty.toFixed(2)}) cannot be greater than SO Quantity (${soQty.toFixed(2)}).`);
                return;
            }

            // Rule 2: Final total must equal balance to save
            if (totalQty !== soQty) {
                Blockloaderhide();
                const diff = (soQty - totalQty).toFixed(2);
                const status = (soQty - totalQty) > 0 ? "short" : "excess";
                showDangerAlert(
                    `Total Delivery Quantity (${totalQty.toFixed(2)}) must equal Balance Quantity (${soQty.toFixed(2)}). ` +
                    `You are ${status} by ${Math.abs(diff)}.`
                );
                return;
            }

            // --- Map payload ---
            const mappedData = data.map(row => ({
                SrNo: row.SrNo,
                Delivery_Date: row.Delivery_Date ? new Date(row.Delivery_Date) : null,
                Delivery_Qty: (row.Delivery_Qty !== undefined && row.Delivery_Qty !== null && String(row.Delivery_Qty).trim() !== "")
                    ? parseFloat(row.Delivery_Qty)
                    : null,
                Delivery_Remarks: row.Delivery_Remarks ? String(row.Delivery_Remarks).trim() : null,
                Date_PC_Week: row.Date_PC_Week ? String(row.Date_PC_Week).trim() : null
            }));

            const request = {
                Id: headerData.Id || 0,
                SaleOrder_Id: headerData.Id || 0,
                Vendor: headerData.Vendor || '',
                SO_No: headerData.SO_No || '',
                SO_Date: toIsoDate(headerData.SO_Date) || null,
                SO_Qty: soQty,
                Material: headerData.Material,
                Old_Material_No: headerData.Old_Material_No,
                Key : headerData.Key,
                Key1 : headerData.Key1,
                SODeliveryScheduleList: mappedData
            };

            $.ajax({
                type: "POST",
                url: '@Url.Action("SOSaveDeliverySchedule", "OpenPo")',
                data: JSON.stringify(request),
                contentType: "application/json",
                success: function () {
                    Blockloaderhide();
                    $(".alert-success").remove();
                    showSuccessAlert("Schedule saved successfully!");
                    $("#deliveryScheduleModal").modal('hide');
                    loadSalesOrderSummary();
                },
                error: function () {
                    Blockloaderhide();
                    showDangerAlert("Failed to save schedule. Please try again.");
                }
            });
        }
    </script>
}
@section HideSidebar { }



                            .