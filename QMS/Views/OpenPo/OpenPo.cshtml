@using QMS.Core.Enums
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = "Open Po Details";
    var userType = HttpContextAccessor.HttpContext.Session.GetString("User_Type") ?? "";
    var vendor_Name = HttpContextAccessor.HttpContext.Session.GetString("FullName") ?? "";
}
<link href="~/css/fontawesome/styles.min.css" rel="stylesheet" />
<link href="~/css/tabulator/tabulator.min.css" rel="stylesheet" />
<link href="~/css/tabulator/tabulator_bootstrap4.min.css" rel="stylesheet" />
<link href="~/css/pnotify.css" rel="stylesheet" />
<script src="~/js/jquery.min.js"></script>
<script src="~/js/jquery.datatables.js"></script>
<script src="~/js/pnotify.js"></script>
<script src="~/js/pnotify.confirm.js"></script>
<script src="~/js/tabulator.js"></script>
<script src="~/js/xlsx.min.js"></script>
<link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
<style>

    .bborder {
        border-bottom: 1px solid #eeeeee;
    }

    th {
        border-bottom: 3px solid #eeeeee;
    }

    .current {
        background-color: white !important;
        color: blue !important;
    }

    .modal-header {
        /* background-color: #ececec !important; */
        padding-bottom: 7px !important;
        font-weight: bold;
    }

    .modal-body {
        padding: 0.4rem 1.25rem;
    }

    .form-control {
        padding: 0 10px !important;
        border: 0;
        border-bottom: 1px solid #cccccc;
        border-radius: 0px;
    }


    label {
        margin-bottom: 0;
        margin-top: .3rem;
    }

    #scrollToTopBtn:hover {
        background-color: #0056b3; /* Darker blue */
    }

    #scrollToTopBtn {
        outline: none; /* Removes the focus border */
    }

    #uploadDetailTable tr {
        background-color: #ffffff !important; /* Force all rows to be white */
    }

    #uploadDetailTable {
        width: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
    }

    .modal-open .tabulator-row {
        min-height: unset; /* Removes the min-height */
    }

    .select2-container {
        z-index: 0 !important; /* Ensure it's above the modal */
    }

    .tabulator .tabulator-header .tabulator-col {
        font-size: 14px;
        background-color: #D6E4F0;
        font-weight: 600;
        border-right: 1px solid #ccc;
    }

    .tabulator-row .tabulator-cell {
        /* border-right: none; */
        padding: 5px 5px;
        font-size: 14px;
        height: 30px;
    }

    .tabulator-cell:hover {
        color: #4682B4 !important;
        cursor: pointer !important;
        font-weight: bold;
    }

    /* Slideout modal customization */
    .modal-dialog-slideout {
        position: fixed;
        margin: auto;
        width: 60%;
        height: 100%;
        right: 10px;
        top: 250px;
        bottom: 0;
        transform: translate3d(100%, 0, 0);
        transition: transform 0.5s ease-out;
    }

    .modal.fade .modal-dialog-slideout {
        transform: translate3d(100%, 0, 0);
    }

    .modal.fade.show .modal-dialog-slideout {
        transform: translate3d(0, 0, 0);
    }

    .tabulator-tree-col .tabulator-tree-control {
        display: none;
    }

    /* .tabulator-row.tabulator-tree-level-0 {
                font-size: large;
                color: #4682B4 !important;
                font-weight: 600;
            } */

    .tabulator-row.tabulator-tree-level-1 {
        font-size: medium;
    }

    .tabulator-row .tabulator-cell .tabulator-data-tree-control {
        border: 2px solid #4682B4 !important;
        background-color: #4682B4 !important;
    }

    .tabulator .tabulator-data-tree-branch {
        border-left: 2px solid #4682B4 !important;
        border-bottom: 2px solid #4682B4 !important;
    }

    .form-check.form-switch .form-check-input {
        width: 2.4em;
        height: 1.2em;
        background-color: #ddd;
        border-radius: 1.2em;
        position: relative;
        appearance: none;
        -webkit-appearance: none;
        outline: none;
        transition: background-color 0.3s;
    }

        .form-check.form-switch .form-check-input:checked {
            background-color: #007bff;
        }

        .form-check.form-switch .form-check-input::before {
            content: "";
            position: absolute;
            top: 0.140em;
            left: 0.125em;
            width: 0.9em;
            height: 0.9em;
            background-color: #fff;
            border-radius: 50%;
            transition: transform 0.3s;
        }

        .form-check.form-switch .form-check-input:checked::before {
            transform: translateX(1.2em);
        }
</style>


<div class="content">

    <div class="card">
        <div class="card-body d-flex justify-content-between align-items-center">
            <div style="font-size: large; color: #4682B4;">
                @* <b style="font-size: large;color: #1f7d75;">Open Po Details</b> *@
                @(userType == "Vendor" ? vendor_Name : "Vendor PO Details")
            </div>
            <!-- Back Button -->
            <div>
                @*  <button id="download-template" class="btn btn-outline-secondary legitRipple" style="font-size:14px">
                    <i class="fas fa-regular fa-file-excel mr-2"></i>Download Blank Exl
                </button> *@
                <div class="ml-auto">
                  @*   @if (userType != "Vendor")
                    {
                        <button type="button" class="btn btn btn-outline-primary legitRipple" onclick="openUpload()" style="margin: 1px 0px; width: 143px;font-size:14px">
                            <i class="fas fa-upload mr-2"></i>Upload Xl
                        </button>
                    } *@
                    <button type="button" id="exportExcel" class="btn btn btn-outline-danger legitRipple" onclick="" style="margin: 1px 0px; width: 140px;font-size:14px">
                        <i class="fas fa-regular fa-file-excel mr-2"></i>Export Xl
                    </button>&nbsp;

                    <button id="backButton" class="btn btn-outline-warning legitRipple" onclick="location.href='@Url.Action("SCMMenu","Home")'" style="font-size:14px">
                        <i class="fas fa-arrow-left"></i> Back
                    </button>
                </div>

            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="chart-container">
                        <div class="card-body d-flex justify-content-between align-items-center" style="margin-top: -30px;margin-bottom: -15px;">
                        </div>

                        <div class="row form-group align-items-center mb-2">
                            <label class="col-1" for="toggleExpandRows" style="font-weight:600;font-size:14px;">Expand Rows :</label>
                            <div class="col-2">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="toggleExpandRows" checked>
                                </div>
                            </div>
                        </div>

                        @* <div class="form-check mb-2">
                            <input class="form-check-input" type="checkbox" id="toggleExpandRows">
                            <label class="form-check-label" for="toggleExpandRows">
                                Expand All Rows
                            </label>
                        </div> *@

                        <div class="form-group row">
                            <div id="openPo_Table" class="col-12"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="deliveryScheduleModal" tabindex="-1" aria-labelledby="deliveryScheduleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-slideout modal-lg">
        <div class="modal-content">
            <div class="modal-header text-white" style="background:#4682B4;">
                <h5 class="modal-title" id="deliveryScheduleModalLabel">Delivery Schedule Entry</h5>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Close">Close</button>
            </div>

            <div class="modal-body">
                <input type="hidden" id="Key" />
                <input type="hidden" id="Key1" />

                <!-- PO Info -->
                <div class="border rounded p-3 bg-light mb-3 d-flex justify-content-between" style="font-size:larger">
                    <div><strong>PO No : </strong> <span id="lblPONo"></span></div>
                    <div><strong>PO Date : </strong> <span id="lblPODate"></span></div>
                    <div><strong>PO Qty : </strong> <span id="lblPOQty"></span></div>
                    <div><strong>Bal.Qty : </strong> <span id="lblBalanceQty"></span></div>
                </div>

                <!-- Tabulator delivery schedule table -->
                <div id="deliveryScheduleTable"></div>

                <div class="mt-3">

                    <button type="button" class="btn btn-outline-primary legitRipple mr-2" onclick="addScheduleRow()" title="Add Delivery Schedule">
                        <i class="fas fa-plus fa-1x"></i>
                    </button>
                    @* <button class="fas fa-plus mr-2 fa-1x" onclick="addScheduleRow()"></button> *@
                    <button class="btn btn-outline-success float-end" onclick="saveDeliverySchedule()">Save Schedule</button>
                </div>

            </div>
        </div>
    </div>
</div>


@* <div class="modal fade" id="uploadDetailModal" tabindex="-1" aria-labelledby="uploadDetailLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header custom-header">
                <h5 class="modal-title" id="uploadDetailLabel">Upload Product Code Deatils</h5>
                <div>
                    <button type="button" class="btn btn-secondary legitRipple" data-bs-dismiss="modal">Close</button>
                </div>

            </div>
            <div class="modal-body">
                <div id="uploadDetailTable">
                </div>
            </div>
        </div>
    </div>
</div> *@

<!-- Scroll to Top Button -->
<button id="scrollToTopBtn" style="
    display: none;
    position: fixed;
    bottom: 10px;
    right: 40px;
    z-index: 1000;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 10%;
    padding: 10px 15px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    cursor: pointer;
    transition: opacity 0.3s;">
    <i class="fa fa-arrow-up"></i>
</button>

@section Scripts {
    <script src="~/js/select2.min.js"></script>
    <script>

         var tabledata = [];
         var table = '';
         var userType = '@userType';
         var vendorName = '@vendor_Name';

        var deliveryScheduleTable;
        var poRowDataCache = {};
        var currentMainRowData = {};
        var selectedPoId = 0;
        window.PC_CAL = [];


         $(document).ready(function () {
             $('#upload-button').on('click', async function () {
                    var expectedColumns = [
                        'Key', 'PR Type', 'PR Description', 'Requisioner', 'Tracking No', 'PR No',
                        'Batch No', 'Reference No', 'Vendor', 'PO No', 'PO Date', 'PO Qty', 'Balance Qty', 'Destination', 'Delivery Date',
                        'Balance Value', 'Material', 'Hold Date', 'Cleared Date'
                    ];

                    var url = '@Url.Action("UploadOpenPoDataExcel", "OpenPo")';
                    handleImportExcelFile(url, expectedColumns);
             });


             if(userType == "Vendor")
             {
                 loadVendorData()
             }
             else
             {
                 loadPCCalendar().always(function () {
                    loadData();
                 });
             }
         });

        function clearForm() {
            // Clear all input fields
            document.querySelectorAll('.form-control').forEach(function (input) {
                if (input.tagName === 'INPUT') {
                    if (input.type === 'hidden' || input.readOnly) {
                        // Skip hidden or readonly inputs
                        return;
                    }
                    input.value = ''; // Clear input value
                } else if (input.tagName === 'SELECT') {
                    input.selectedIndex = 0; // Reset dropdown to first option
                }
            });

            // Clear error messages if needed
            document.querySelectorAll('.text-danger').forEach(function (error) {
                error.textContent = '';
            });
        }

        function openUpload() {

            clearForm();
            if (!$('#uploadModal').length) {
                $('body').append(partialView);
            }
            $('#uploadModal').modal('show');
        }

        function parseAnyDate(input) {
            if (!input) return null;
            if (input instanceof Date) return isNaN(input) ? null : input;

            if (typeof input === 'string') {
                // dd/MM/yyyy
                let m = input.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/);
                if (m) {
                    const d = parseInt(m[1], 10), mo = parseInt(m[2], 10) - 1, y = parseInt(m[3], 10);
                    const dt = new Date(y, mo, d);
                    return isNaN(dt) ? null : dt;
                }
                // yyyy-MM-dd
                m = input.match(/^(\d{4})-(\d{2})-(\d{2})$/);
                if (m) {
                    const y = parseInt(m[1], 10), mo = parseInt(m[2], 10) - 1, d = parseInt(m[3], 10);
                    const dt = new Date(y, mo, d);
                    return isNaN(dt) ? null : dt;
                }
                // last resort
                const dt = new Date(input);
                return isNaN(dt) ? null : dt;
            }
            return null;
        }

        function isBetweenInclusive(d, fromStr, toStr) {
            const from = parseAnyDate(fromStr);
            const to   = parseAnyDate(toStr);
            if (!d || !from || !to) return false;

            const dd = new Date(d.getFullYear(), d.getMonth(), d.getDate());
            const ff = new Date(from.getFullYear(), from.getMonth(), from.getDate());
            const tt = new Date(to.getFullYear(), to.getMonth(), to.getDate());
            return dd >= ff && dd <= tt;
        }

        function getPCWeekCodeForDate(anyDate) {
            const d = parseAnyDate(anyDate);
            if (!d || !Array.isArray(window.PC_CAL) || window.PC_CAL.length === 0) return "";
            const hit = window.PC_CAL.find(r => isBetweenInclusive(d, r.from, r.to));
            if (!hit) return "";
            return `PC${hit.pc}WK${hit.week}`;
        }


        function loadData() {

            Blockloadershow();

            $.ajax({
                url: '@Url.Action("GetOpenPOWithDelivery", "OpenPo")',
                type: 'GET',
                success: function (data) {
                    Blockloaderhide();
                    if (data && Array.isArray(data.poHeaders)) {

                        const response = {
                            poHeaders: data.poHeaders,
                            deliverySchedules: data.deliverySchedules
                        };

                        OnTabGridLoad(response);
                    }
                    else {
                        showDangerAlert('No data available to load.');
                    }
                },
                error: function (xhr, status, error) {
                    showDangerAlert('Error retrieving data: ' + error);
                    Blockloaderhide();
                }
            });
        }

        // function loadPCCalendar(callback) {
        //     Blockloadershow();
        //     $.ajax({
        //         url: '@Url.Action("GetPCCalendar", "OpenPo")',
        //         type: 'GET',
        //         success: function (data) {
        //             Blockloaderhide();
        //             if (Array.isArray(data)) {
        //                 window.PC_CAL = data.map(r => ({
        //                     pc:   r.pc ?? r.PC ?? r.Pc ?? r.pC,
        //                     week: r.week ?? r.Week,
        //                     from: r.from ?? r.FROM ?? r.From,
        //                     to:   r.to   ?? r.TO   ?? r.To
        //                 })).filter(x => x.pc && x.week && x.from && x.to);
        //                 if (typeof callback === "function") callback();
        //             } else {
        //                 showDangerAlert('PC Calendar: invalid response.');
        //                 if (typeof callback === "function") callback(); // still proceed
        //             }
        //         },
        //         error: function (xhr, status, error) {
        //             Blockloaderhide();
        //             showDangerAlert('PC Calendar load failed: ' + error);
        //             if (typeof callback === "function") callback(); // still proceed
        //         }
        //     });
        // }

        function loadPCCalendar() {
          // IMPORTANT: return the jqXHR
          return $.ajax({
           url: '@Url.Action("GetPCCalendar", "OpenPo")',
            type: 'GET',
            dataType: 'json'
          }).done(function (pcRaw) {
            window.PC_CAL = (pcRaw || []).map(r => ({
              pc:   r.pc ?? r.PC ?? r.Pc ?? r.pC,
              week: r.week ?? r.Week,
              from: r.from ?? r.FROM ?? r.From,
              to:   r.to   ?? r.TO   ?? r.To
            })).filter(x => x.pc && x.week && x.from && x.to);
          }).fail(function (xhr, status, err) {
            console.warn('PC Calendar load failed:', status, err, xhr?.responseText);
            window.PC_CAL = []; // fail-soft
          });
        }

        function loadVendorData() {

            Blockloadershow();
            $.ajax({
                url: '@Url.Action("GetOpenPOWithDelivery", "OpenPo")',
                type: 'GET',
                data: { vendor: vendorName },
                success: function (data) {
                    Blockloaderhide();
                    if (data && Array.isArray(data.poHeaders)) {

                        const response = {
                            poHeaders: data.poHeaders,
                            deliverySchedules: data.deliverySchedules
                        };

                        OnTabGridLoad(response);
                    }
                    else {
                        showDangerAlert('No data available to load.');
                    }
                },
                error: function (xhr, status, error) {
                    showDangerAlert('Error retrieving data: ' + error);
                    Blockloaderhide();
                }
            });
        }

                            //define column header menu as column visibility toggle
        var headerMenu = function () {
            var menu = [];
            var columns = this.getColumns();

            for (let column of columns) {

                //create checkbox element using font awesome icons
                let icon = document.createElement("i");
                icon.classList.add("fas");
                icon.classList.add(column.isVisible() ? "fa-check-square" : "fa-square");

                //build label
                let label = document.createElement("span");
                let title = document.createElement("span");

                title.textContent = " " + column.getDefinition().title;

                label.appendChild(icon);
                label.appendChild(title);

                //create menu item
                menu.push({
                    label: label,
                    action: function (e) {
                        //prevent menu closing
                        e.stopPropagation();

                        //toggle current column visibility
                        column.toggle();

                        //change menu item icon
                        if (column.isVisible()) {
                            icon.classList.remove("fa-square");
                            icon.classList.add("fa-check-square");
                        } else {
                            icon.classList.remove("fa-check-square");
                            icon.classList.add("fa-square");
                        }
                    }
                });
            }

            return menu;
        };

        function wildcardFilter(headerValue, rowValue) {
            if (!headerValue) return true;

            let regexStr = headerValue
                .replace(/[-[\]/{}()+?.\\^$|]/g, "\\$&")  // escape special characters
                .replace(/\*/g, ".*"); // convert * to regex

            try {
                let regex = new RegExp("^" + regexStr + "$", "i");
                return regex.test(rowValue || ""); // handle nulls gracefully
            } catch (e) {
                return true; // fallback: show all if regex fails
            }
        }

                function normalizeToEnGb(v) {
            if (!v) return "";
            // already dd/mm/yyyy
            if (/^\d{2}\/\d{2}\/\d{4}$/.test(v)) return v;
            // yyyy-mm-dd -> dd/mm/yyyy
            if (/^\d{4}-\d{2}-\d{2}$/.test(v)) {
                const [y, m, d] = v.split("-");
                return `${d}/${m}/${y}`;
            }
            // best-effort
            const dt = new Date(v);
            return isNaN(dt) ? "" : dt.toLocaleDateString("en-GB");
        }

        function OnTabGridLoad(response) {
            // Clear table data
            debugger;
            Blockloadershow();

            tabledata = [];
            let columns = [];

            var myList = response.poHeaders || [];
            var allTS = response.deliverySchedules || [];

            // Map the response to the table format
            if (myList.length > 0) {

                function formatDate(value) {
                        return value ? new Date(value).toLocaleDateString("en-GB") : "";
                }

                

                 function isTrue(v) {
                  return v === true || v === 1 || v === "1" ||
                         (typeof v === "string" && v.toLowerCase() === "true");
                }

                $.each(myList, function (index, item) {

                    const plannerDateStr = formatDate(item.comit_Planner_date);
                    const plannerPCWeek  = getPCWeekCodeForDate(plannerDateStr);


                    tabledata.push({
                        Sr_No: index + 1,
                        Id: item.id,
                        Key: item.key,
                        PR_Type: item.pR_Type,
                        PR_Desc: item.pR_Desc,
                        Requisitioner: item.requisitioner,
                        Tracking_No: item.tracking_No,
                        PR_No: item.pR_No,
                        Batch_No: item.batch_No,
                        Reference_No: item.reference_No,
                        Vendor: item.vendor,
                        PO_No: item.pO_No,
                        PO_Date: formatDate(item.pO_Date),
                        PO_Qty: item.pO_Qty,
                        Balance_Qty: item.balance_Qty,
                        Destination: item.destination,
                        Delivery_Date: formatDate(item.delivery_Date),
                        Balance_Value: item.balance_Value,
                        Material: item.material,
                        Hold_Date: formatDate(item.hold_Date),
                        Cleared_Date: formatDate(item.cleared_Date),

                        Key1 : item.key1,
                        Comit_Date : formatDate(item.comit_Date),
                        Comit_Qty : item.comit_Qty,
                        Comit_Planner_Qty : item.comit_Planner_Qty,
                        Comit_Planner_date : plannerDateStr,
                        PCWeekDate : plannerPCWeek,
                        Comit_Vendor_Date : formatDate(item.comit_Vendor_Date),
                        Comit_Vendor_Qty : item.comit_Vendor_Qty,
                        Comit_Planner_Remark : item.comit_Planner_Remark,
                        Comit_Date1 : formatDate(item.comit_Date1),
                        Comit_Qty1 : item.comit_Qty1,
                        Comit_Final_Date : formatDate(item.comit_Final_Date),
                        Comit_Final_Qty : item.comit_Final_Qty,
                        Buffer_Day : item.buffer_Day,
                        CreatedBy: item.createdBy,
                        CreatedDate : formatDate(item.createdDate),
                        SuppressChildDelivery: !!item.suppressChildDelivery,
                        _children: []
                    });
                });

                // Add child rows from Table2 (allTS)
                $.each(allTS, function () {
                    var parentRow = tabledata.find(row =>
                        row.Id === this.ven_PoId && row.Vendor === this.vendor
                    );

                    if (parentRow) {
                        const suppress = isTrue(!!parentRow.SuppressChildDelivery);
                         if (!parentRow._childrenHeaderAdded) {
                           parentRow._children.unshift({
                             _isChildHeader: true,
                             Delivery_Date: "Delivery Date",
                             Material: "Date PC Week",
                             Hold_Date: "Qty",
                             Cleared_Date: "Remark"
                           });
                           parentRow._childrenHeaderAdded = true;
                        }

                        parentRow._children.push({
                            DeliverySchu_Id: this.id, // pick what your API returns
                            Ven_PoId: this.ven_PoId,
                            Sr_No: "",
                            Reference_No:"",
                            PO_No: "",
                            PO_Date: "",
                            PO_Qty: "",
                            Destination: "",
                            Delivery_Date:suppress ? "" : formatDate(this.delivery_Date),
                            Material: suppress ? "" : this.date_PC_Week,
                            Hold_Date: suppress ? "" : this.delivery_Qty,
                            Cleared_Date: suppress ? "" : this.delivery_Remark,
                            Buffer_Day : this.buffer_Day,
                            Comit_Planner_date: formatDate(this.planner_Date),
                            PCWeekDate: this.planner_PC_Date,
                            Comit_Date : formatDate(this.comit_Date),
                            Comit_Qty : this.comit_Qty,
                            Comit_Date1 : formatDate(this.comit_Date1),
                            Comit_Qty1 : this.comit_Qty1,
                            Comit_Final_Date : formatDate(this.comit_Final_Date),
                            Comit_Final_Qty : this.comit_Final_Qty,
                            CreatedBy: "",    // empty in child if not used
                        });
                    }
                });
            }

            window.PendTSTableData = JSON.parse(JSON.stringify(tabledata));

                function isEditable(cell) {
                    const value = cell.getValue();
                    return value == null || value === "" || Number.isNaN(value)|| value === 0 ;
                }



                if (userType != "Vendor") {

                    columns.push(
                    {
                        title: "Action",
                        field: "Action",
                        width: 60,
                        headerMenu: headerMenu,
                        hozAlign: "center",
                        headerHozAlign: "center",
                        formatter: function (cell, formatterParams) {
                            const rowData = cell.getRow().getData();
                            let actionButtons = "";

                            // Add using existing button
                            // actionButtons += `<i data-toggle="modal" onclick="showEditProduct(${rowData.Id},'copy')" class="fas fa-plus mr-2 fa-1x" title="Add Using Existing" style="color:green;cursor:pointer;margin-left: 5px;"></i>`;


                                actionButtons += `<i data-toggle="modal" onclick="delConfirm(${rowData.Id})" class="fas fa-trash-alt mr-2 fa-1x" title="Delete" style="color:red;cursor:pointer;margin-left: 5px;"></i>`;
                            // Send email button
                            // actionButtons += `<i data-toggle="modal" onclick="openProdEmail(${rowData.Id})" class="fas fa-envelope text-info mr-2 fa-1x" title="Send Email" style="font-size: 20px; cursor: pointer;margin-left: 5px;"></i>`;

                            return actionButtons;
                        }
                    });
                }

                    columns.push({
                        title: "SNo", field: "Sr_No", sorter: "number", width: 65, headerMenu: headerMenu, hozAlign: "center", headerHozAlign: "left"
                    });

                    if (userType != "Vendor") {
                        columns.push({ title: "Key", field: "Key"/* , width: 110 */, headerMenu: headerMenu, headerFilter: "input", hozAlign: "left", headerHozAlign: "left" });
                        columns.push({ title: "Key1", field: "Key1"/* , width: 110 */, headerMenu: headerMenu, headerFilter: "input", hozAlign: "left", headerHozAlign: "left" });
                        columns.push({ title: "PR Type", field: "PR_Type"/* , width: 160 */, headerMenu: headerMenu, headerFilter: "input",headerFilterFunc: "input", hozAlign: "center", headerHozAlign: "center" });
                        columns.push({ title: "PR Description", field: "PR_Desc"/* , width: 90 */, sorter: "number", headerMenu: headerMenu, headerFilter: "input", hozAlign: "left", headerHozAlign: "left" });
                        columns.push({ title: "Requisitioner", field: "Requisitioner"/* , width: 90 */, sorter: "number", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" });
                        columns.push({ title: "Tracking No", field: "Tracking_No"/* , width: 90 */, sorter: "number", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" });
                        columns.push({ title: "PR No", field: "PR_No"/* , width: 130 */, headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" });
                        columns.push({ title: "Batch No", field: "Batch_No"/* , width: 100 */, sorter: "number", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" });
                        columns.push({ title: "Reference No", field: "Reference_No"/* , width: 280 */, headerMenu: headerMenu, headerFilter: "input",headerFilterFunc: "input", hozAlign: "left", headerHozAlign: "left" });
                        columns.push({ title: "Vendor", field: "Vendor"/* , width: 150 */, headerMenu: headerMenu, headerFilter: "input", hozAlign: "left", headerHozAlign: "left" });
                    }

                    columns.push({ title: "PO No", field: "PO_No"/* , width: 150 */, headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" });
                    columns.push({ title: "PO Date", field: "PO_Date"/* , width: 150 */, headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" });
                    columns.push({ title: "PO Qty", field: "PO_Qty"/* , width: 150 */, headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" });

                    if (userType != "Vendor")
                    {
                        columns.push({ title: "BalanceQty", field: "Balance_Qty"/* , width: 150 */, headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" });
                        columns.push({ title: "Balance Value", field: "Balance_Value", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" });
                    }

                    columns.push({ title: "Destination", field: "Destination", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" });
                    columns.push({ title: "Delivery Date", field: "Delivery_Date", sorter: "number", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center",
                        formatter: function (cell, formatterParams) {
                             // const rowData = cell.getRow().getData();
                             //  return `<i class="fas fa-calendar-alt text-primary" style="cursor:pointer;font-size:18px;" title="Manage Delivery Schedule" onclick="openDeliverySchedule(${rowData.Id})"></i>`;
                             // if (!rowData._children) {
                             //     return `<i class="fas fa-calendar-alt text-primary" title="Manage Delivery Schedule" style="cursor:pointer;font-size:18px;" onclick="openDeliverySchedule(${rowData.Id})"></i>`;
                             // } else {
                             //     return rowData.Delivery_Date || "";
                             // }

                                const row = cell.getRow();
                                const data = row.getData();
                                const isChild = row.getTreeParent() !== null;

                                    if (data.SuppressChildDelivery === true) {
                                      return `<div style="display:flex; align-items:center; justify-content:space-between;">
                                                <span style="flex:1; text-align:center; font-weight:600; color:#59C3C3;"></span>
                                                <i class="fas fa-regular fa-calendar-days"
                                                   title="Manage Delivery Schedule"
                                                   style="cursor:pointer; font-size:18px;"
                                                   onclick="openDeliverySchedule(${data.Id})">
                                                </i>
                                            </div>`;
                                    }

                                    function parseDateString(str) 
                                    {
                                        const parts = str?.split("/");
                                        if (parts?.length === 3) {
                                            const day = parseInt(parts[0], 10);
                                            const month = parseInt(parts[1], 10) - 1;
                                            const year = parseInt(parts[2], 10);
                                            return new Date(year, month, day);
                                        }
                                        return null;
                                    }

                                if (data.Id) 
                                {
                                    let latestDate = "";

                                    const children = row.getTreeChildren();
                                    if (children.length > 0) {
                                        const dates = children
                                            .map(childRow => {
                                                const childData = childRow.getData();
                                                return parseDateString(childData.Delivery_Date);
                                            })
                                            .filter(date => date instanceof Date && !isNaN(date));

                                        if (dates.length > 0) {
                                            const maxDate = new Date(Math.max(...dates));
                                            latestDate = ` ${maxDate.toLocaleDateString("en-GB")}`;
                                        }
                                    }

                                    // let latestDate = "";

                                    // if (data._children && Array.isArray(data._children)) {
                                    //     const dates = data._children
                                    //         .map(child => new Date(child.Delivery_Date))
                                    //         .filter(date => !isNaN(date));

                                    //     if (dates.length > 0) {
                                    //         const maxDate = new Date(Math.max(...dates));
                                    //         latestDate = ` ${maxDate.toLocaleDateString("en-GB")}`;
                                    //     }
                                    // }

                                    return `<div style="display:flex; align-items:center; justify-content:space-between;">
                                                <span style="flex:1; text-align:center; font-weight:600; color:#59C3C3;">${latestDate}</span>
                                                <i class="fas fa-regular fa-calendar-days"
                                                   title="Manage Delivery Schedule"
                                                   style="cursor:pointer; font-size:18px;"
                                                   onclick="openDeliverySchedule(${data.Id})">
                                                </i>
                                            </div>`;
                                }

                                // For child rows: show the formatted delivery date if present
                                 return data.Delivery_Date || "";
                        }
                    });

                    columns.push({ title: "Material", field: "Material", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" });
                    columns.push({ title: "Hold Date", field: "Hold_Date", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center"});
                    columns.push({ title: "Cleared Date", field: "Cleared_Date", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" });

                    if (userType != "Vendor")
                    {
                        columns.push({ title: "Buffer Day", field: "Buffer_Day"/* , width: 150 */, headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center",
                            editor: "number",                                // <- built-in editor (string)
                            editable: cell => !!cell.getRow().getTreeParent()   // child only
                        });

                        columns.push({
                            title: "Planner Date",
                            field: "Comit_Planner_date",
                            headerMenu: headerMenu,
                            headerFilter: "input",
                            hozAlign: "center",
                            headerHozAlign: "center"
                            // formatter: function (cell) {
                            //   const v = cell.getValue();
                            //   if (!v) return "";
                            //   const d = new Date(v);
                            //   if (isNaN(d)) return v; // already a string like dd/MM/yyyy
                            //   const dd = String(d.getDate()).padStart(2, "0");
                            //   const mm = String(d.getMonth() + 1).padStart(2, "0");
                            //   const yyyy = d.getFullYear();
                            //   return `${dd}/${mm}/${yyyy}`;
                            // },
                            // editor: "date",
                            // editable: true
                        });
                        columns.push({ title: "Planner Date in PC Week", field: "PCWeekDate", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center", editor: "date", editable: false });
                        columns.push({ title: "Planner Qty", field: "Comit_Planner_Qty", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center", editor: "number", editable: isEditable });
                        columns.push({ title: "Planner Remark", field: "Comit_Planner_Remark", headerMenu: headerMenu, headerFilter: "input", hozAlign: "left", headerHozAlign: "center", editor: "input", editable: isEditable });
                        columns.push({ title: "1st Commitment Date", field: "Comit_Date", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" });
                        columns.push({ title: "1st Commitment Qty", field: "Comit_Qty", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" });
                        columns.push({ title: "2nd Commitment Date", field: "Comit_Date1", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" });
                        columns.push({ title: "2nd Commitment Qty", field: "Comit_Qty1", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center"});
                        columns.push({ title: "3rd Commitment Date", field: "Comit_Final_Date", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" });
                        columns.push({ title: "3rd Commitment Qty", field: "Comit_Final_Qty", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" });
                        // columns.push({ title: "Planner Date", field: "Comit_Planner_date", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center", editor: "date", editable: true });

                        columns.push({ title: "Vendor Date", field: "Comit_Vendor_Date", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center", editor: "date", editable: isEditable });
                        columns.push({ title: "Vendor Qty", field: "Comit_Vendor_Qty", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center", editor: "number", editable: isEditable });
                        columns.push({ title: "User", field: "CreatedBy", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" });
                    }

                    columns.push({ title: "ID", field: "Id", visible: false });

                     if (table) {
                       table.replaceData(window.PendTSTableData)
                         .then(() => Blockloaderhide())
                         .catch(() => Blockloaderhide());
                       return;
                    }

                // // Initialize Tabulator
                table = new Tabulator("#openPo_Table", {
                    data: window.PendTSTableData, // Table data
                    renderHorizontal: "virtual",
                    movableColumns: true, // Allow column reordering
                    pagination: "local", // Enable pagination
                    paginationSize: 10, // Rows per page
                    paginationSizeSelector: [50, 100, 500, 1500, 2000],
                    paginationCounter: "rows",
                    layout: "fitDataFill",
                    dataTree: true,
                    dataTreeStartExpanded: true,
                    dataTreeChildField: "_children",
                    dataTreeFilter: false,
                    // placeholder: "No data available",
                    dataEmpty: "<div style='text-align: center; font-size: 1rem; color: gray;'>No data available</div>", // Placeholder message
                    index: "Id", // This tells Tabulator to use `Id` as the unique row key
                    columns: columns,

                     rowFormatter: function(row){
                       const d = row.getData();
                       if (d._isChildHeader) {
                         const el = row.getElement();
                         el.style.fontWeight = "700";
                         el.style.background = "#f1f5f9";
                         // el.style.borderLeft = "3px solid #94a3b8";
                         // Disable hover/edit/etc.
                         row.getCells().forEach(c => {
                           c.getElement().style.pointerEvents = "none";
                         });
                       }
                    },
                });


                table.on("cellEdited", function (cell) {
                    // let columnField = cell.getColumn().getField(); // Get the column index
                    // if (columnField !== "Action" && columnField !== "Delivery_Date") {
                    //     saveEditedRow(cell.getRow().getData());
                    // }

                    const field = cell.getColumn().getField();
                    const row = cell.getRow();
                    const data = row.getData();
                    const isChild = !!row.getTreeParent();

                    if (isChild && field === "Buffer_Day") {
                        debugger;
                        const deliveryId = data.DeliverySchu_Id;
                        const buf = parseInt(data.Buffer_Day, 10) || 0;
                        if (deliveryId == null) return;
                        saveBuffForPO(deliveryId, buf, row);
                       
                    }
                    else{
                        if(!isChild){
                            saveEditedRow(cell.getRow().getData());
                        }
                    }
                });

                // table.on("cellClick", function (e, cell) {
                //     let columnField = cell.getColumn().getField(); // Get the column index

                //     // Exclude first and second column by field names
                //     if (columnField !== "IsLock" && columnField !== "Action" && columnField !== "Delete" && columnField !== "Selected") {
                //         let rowData = cell.getRow().getData();
                //         showEditProduct(rowData.Id, "edit");
                //     }
                // });

                    document.getElementById("toggleExpandRows").addEventListener("change", function () {
                        const shouldExpand = this.checked;
                        const allRows = table.getRows();

                        allRows.forEach(row => {
                            if (row.getTreeChildren().length > 0) {
                                shouldExpand ? row.treeExpand() : row.treeCollapse();
                            }
                        });
                    });


                document.getElementById("exportExcel").addEventListener("click", function () {
                    table.download("xlsx", "Open Po List.xlsx", { sheetName: "Open Po List" });
                });
            // }
            // else {
            //     showDangerAlert('No data available.');
            // }

            // Hide loader
            Blockloaderhide();
        }


        function openDeliverySchedule(id) {
            debugger;
            Blockloadershow();
            // Get full row data from Tabulator
            const row = table.getRow(id).getData();

            selectedPoId = id;
            currentMainRowData = row;
            poRowDataCache[id] = row;

            // Set PO header info
            $("#lblPONo").text(row.PO_No);
            $("#lblPODate").text(row.PO_Date);
            $("#lblPOQty").text(row.PO_Qty);
            $("#lblBalanceQty").text(row.Balance_Qty);
            $("#Key").val(row.Key);
            $("#Key1").val(row.Key1);




           $("#deliveryScheduleModal").modal('show');
           // loadDeliveryScheduleTable();

            $.ajax({
                url: '@Url.Action("GetDeliverySchedule", "OpenPo")',
                type: 'GET',
                data: { poId: id },
                success: function (data) {
                    Blockloaderhide();
                    // $("#deliveryScheduleModal").modal('show');

                    if (data && data.deliveryScheduleList && data.deliveryScheduleList.length > 0) {
                        loadDeliveryScheduleTable(data.deliveryScheduleList);
                    } else {
                        loadDeliveryScheduleTable([]); // show empty table if no delivery schedule found
                    }
                }
            });
        }

        // Jump to next editable cell (same row → next row) and visibly highlight by starting edit
        function moveToNextHorizontalCell(e, cell) {
            if (e.key === "Enter") {
                e.preventDefault();

                var row = cell.getRow();
                var cells = row.getCells();
                var currentIndex = cells.indexOf(cell);

                // Move to the next cell in the same row
                var nextCell = cells[currentIndex + 1];

                // If no more columns in this row, move to first editable cell in next row
                if (!nextCell) {
                    var nextRow = row.getNextRow();
                    if (nextRow) {
                        nextCell = nextRow.getCells()[0]; // first cell of next row
                    }
                }

                if (nextCell) {
                    nextCell.edit();
                }
            }
        }

         function loadDeliveryScheduleTable(response) {

            function toISODate(d) {
                if (!d) return "";
                const dt = new Date(d);
                dt.setHours(0,0,0,0);
                const y = dt.getFullYear();
                const m = String(dt.getMonth()+1).padStart(2,"0");
                const dd = String(dt.getDate()).padStart(2,"0");
                return `${y}-${m}-${dd}`;
            }

            function todayISO(){
                const t = new Date();
                t.setHours(0,0,0,0);
                const y = t.getFullYear();
                const m = String(t.getMonth()+1).padStart(2,'0');
                const d = String(t.getDate()).padStart(2,'0');
                return `${y}-${m}-${d}`;
            }

            let tabledata = [];

            if (response.length > 0) {
                $.each(response, function (index, item) {

                    function formatDate(value) {
                        return value ? new Date(value).toLocaleDateString("en-GB") : "";
                    }

                    tabledata.push({
                        SrNo: index + 1,
                        Delivery_Date: toISODate(item.delivery_Date),  // Assuming delivery_Date comes as raw datetime
                        Delivery_Qty: item.delivery_Qty,
                        Delivery_Remark: item.delivery_Remark,
                        Date_PC_Week : item.date_PC_Week || getPCWeekCodeForDate(toISODate(item.delivery_Date))
                    });
                });
            }

            deliveryScheduleTable = new Tabulator("#deliveryScheduleTable", {
                data: tabledata,
                layout: "fitColumns",
                columns: [
                    { title: "Sr No.", field: "SrNo", width: 48 ,hozAlign: "center", headerHozAlign: "center"},
                    {
                        title: "Date",
                        field: "Delivery_Date",
                        width: 110,
                        hozAlign: "center",
                        headerHozAlign: "center",

                        // custom editor: <input type="date">
                        editor: function(cell, onRendered, success, cancel){
                          const value = cell.getValue() || "";
                          const input = document.createElement("input");
                          input.type = "date";
                          input.value = value;
                          input.min = todayISO(); // blocks past dates
                          input.style.width = "100%";

                            onRendered(function(){
                                input.focus();
                                input.addEventListener("blur", () => success(input.value));
                                input.addEventListener("keydown", (e) => {
                                  if(e.key === "Enter") { e.preventDefault(); input.blur(); }
                                  if(e.key === "Escape") cancel();
                                });
                            });

                          return input;
                        },

                        // custom formatter for DD/MM/YYYY
                        formatter: function(cell){
                          const v = cell.getValue();
                          if(!v) return "";
                          const [y,m,d] = v.split("-");
                          return `${d}/${m}/${y}`;
                        },

                        // guard when user types via keyboard
                        validator: function(cell, value){
                          if(!value) return true;
                          const picked = new Date(value);
                          const t = new Date(); t.setHours(0,0,0,0);
                          return picked >= t;
                        },

                        cellEditing: function (cell) {
                            cell.getElement().addEventListener("keydown", function (e) {
                                moveToNextHorizontalCell(e, cell);
                            });
                        }
                    },
                    { title: "PC Date", field: "Date_PC_Week", editor: false, width: 105 ,hozAlign: "center", headerHozAlign: "center"},
                    { title: "Qty", field: "Delivery_Qty", editor: "number", width: 80 ,hozAlign: "center", headerHozAlign: "center",
                        cellEditing: function (cell) {
                                cell.getElement().addEventListener("keydown", function (e) {
                                    moveToNextHorizontalCell(e, cell);
                                });
                        }
                    },
                    { title: "Remark", field: "Delivery_Remark", editor: "input", width: 455,hozAlign: "left", headerHozAlign: "left",
                        cellEditing: function (cell) {
                                cell.getElement().addEventListener("keydown", function (e) {
                                    moveToNextHorizontalCell(e, cell);
                                });
                        }
                    },
                    {
                        title: "Action", width: 60,hozAlign: "center", headerHozAlign: "center",
                        formatter: function () {
                            return `<i data-toggle="modal" class="fas fa-trash-alt mr-2 fa-1x" title="Delete" style="color:red;cursor:pointer;margin-left: 5px;"></i>`;
                        },
                        cellClick: function(e, cell) {
                            cell.getRow().delete();
                            renumberSrNo();
                        }
                    }
                ],


            });

            deliveryScheduleTable.on("cellEdited", function (cell) {
                const field = cell.getColumn().getField();
                if (field === "Delivery_Date") {
                  recomputePCWeekForRow(cell.getRow());
                }
            });

        //             const tableEl = document.querySelector('#deliveryScheduleTable');
        // let lastCellForEnterNav = null;

        // tableEl.addEventListener('focusin', (e) => {
        //   const cellEl = e.target.closest('.tabulator-cell');
        //   if(cellEl){
        //     lastCellForEnterNav = deliveryScheduleTable.getCellFromElement(cellEl);
        //   }
        // }, true);

        // tableEl.addEventListener('keydown', function(e){
        //   if(e.key === 'Enter' && !e.shiftKey){
        //     const cellEl = e.target.closest('.tabulator-cell');
        //     if(!cellEl && !lastCellForEnterNav) return;

        //     e.preventDefault();                         // stop newline/submit
        //     if (typeof e.target.blur === 'function') e.target.blur(); // commit current edit

        //     const cell = cellEl
        //       ? deliveryScheduleTable.getCellFromElement(cellEl)
        //       : lastCellForEnterNav;

        //     // After commit, start editing next cell and focus its input (for highlight)
        //     setTimeout(() => { if(cell) moveToNextEditableCell(cell); }, 0);
        //   }
        // }, true);
        }

        function recomputePCWeekForRow(row){
          const d = row.getData().Delivery_Date; // "yyyy-MM-dd"
          const code = d ? getPCWeekCodeForDate(d) : "";
          const cell = row.getCell("Date_PC_Week");
          if (cell) cell.setValue(code);
        }

        function renumberSrNo() {
            const rows = deliveryScheduleTable.getRows();
            rows.forEach((row, index) => {
                row.update({ SrNo: index + 1 });
            });
        }

        function addScheduleRow() {
            let rowCount = deliveryScheduleTable.getDataCount() + 1;
            deliveryScheduleTable.addRow(
                { SrNo: rowCount, Delivery_Date: "",Date_PC_Week:"", Delivery_Qty: 0, Delivery_Remark: "" },
                     false, // Scroll to row = false (optional)
                    "bottom" // <- Ensures row is added at the bottom
                    ).then((row) => {
                        setTimeout(() => {
                    // Edit the Delivery_Date cell (date editor)
                    row.getCell("Delivery_Date").edit();

                    // Wait a bit to ensure the input is visible and focusable
                    setTimeout(() => {
                        // Try to trigger the calendar pop-up (HTML5 date picker)
                        const dateInput = document.querySelector('.tabulator-editing input[type="date"]');

                        if (dateInput) {
                            dateInput.focus();            // Ensure input is focused
                            dateInput.click();            // Trigger click to open calendar
                            dateInput.showPicker?.();     // Try modern browser support for opening picker
                        }
                    }, 100); // Inner delay after edit() call
                }, 100); // Outer delay after row rendering
            });
        }


        function saveDeliverySchedule() {
            debugger
            Blockloadershow();

            const data = deliveryScheduleTable.getData() || [];
            const headerData = poRowDataCache[selectedPoId] || {};
            const poQty = parseFloat(headerData.PO_Qty) || 0;
            const balanceQty = parseFloat(headerData.Balance_Qty) || 0;

            // --- Basic validations ---
            for (let i = 0; i < data.length; i++) {
                const row = data[i];

                // Remarks mandatory if Delivery_Date is blank
                if (!row.Delivery_Date && (!row.Delivery_Remarks || String(row.Delivery_Remarks).trim() === "")) {
                    Blockloaderhide();
                    showDangerAlert(`Row ${i + 1}: Remarks are mandatory if Delivery Date is blank.`);
                    return;
                }

                // Qty must be numeric and >= 0 (allow 0 for remark-only/date-only rows)
                if (row.Delivery_Qty !== undefined && row.Delivery_Qty !== null && String(row.Delivery_Qty).trim() !== "") {
                    const qty = parseFloat(row.Delivery_Qty);
                    if (isNaN(qty) || qty < 0) {
                        Blockloaderhide();
                        showDangerAlert(`Row ${i + 1}: Delivery Quantity must be a number ≥ 0.`);
                        return;
                    }
                }
            }

            // --- Collect non-zero qty rows & totals ---
            const nonZeroRows = [];
            let totalQty = 0;

            for (let i = 0; i < data.length; i++) {
                const q = parseFloat(data[i].Delivery_Qty);
                if (!isNaN(q) && q > 0) {
                    nonZeroRows.push({ index: i + 1, qty: q });
                    totalQty += q;
                }
            }

            // Rule 1: Single-entry case must equal balance
            if (nonZeroRows.length === 1) {
                const only = nonZeroRows[0];
                if (only.qty !== balanceQty) {
                    Blockloaderhide();
                    showDangerAlert(

                        // Delivery Qty 150 must be equal to PO Bal.Qty 250. Add more Delivery Qty to save the schedule.
                        // `Row ${only.index}: Since only one delivery is entered, its quantity must equal Balance Quantity ` +
                        // `(${balanceQty.toFixed(2)}). You entered ${only.qty.toFixed(2)}.`
                        `Delivery Qty ${(+only.qty).toFixed(0)} must be equal to PO Bal.Qty ${(+balanceQty).toFixed(0)}. Add more Delivery Qty to save the schedule.`
                    );
                    return;
                }
            }

            // (Optional guard: total should not exceed PO Qty)
            if (totalQty > poQty) {
                Blockloaderhide();
                showDangerAlert(`Total Delivery Quantity (${totalQty.toFixed(2)}) cannot be greater than PO Bal. Quantity (${poQty.toFixed(2)}).`);
                return;
            }

            // Rule 2: Final total must equal balance to save
            if (totalQty !== balanceQty) {
                Blockloaderhide();
                const diff = (balanceQty - totalQty).toFixed(2);
                const status = (balanceQty - totalQty) > 0 ? "short" : "excess";
                showDangerAlert(
                    `Total Delivery Quantity (${totalQty.toFixed(2)}) must equal Balance Quantity (${balanceQty.toFixed(2)}). ` +
                    `You are ${status} by ${Math.abs(diff)}.`
                );
                return;
            }

            // --- Map payload ---
            const mappedData = data.map(row => ({
                SrNo: row.SrNo,
                Delivery_Date: row.Delivery_Date ? new Date(row.Delivery_Date) : null,
                Delivery_Qty: (row.Delivery_Qty !== undefined && row.Delivery_Qty !== null && String(row.Delivery_Qty).trim() !== "")
                    ? parseFloat(row.Delivery_Qty)
                    : null,
                Delivery_Remarks: row.Delivery_Remarks ? String(row.Delivery_Remarks).trim() : null,
                Date_PC_Week: row.Date_PC_Week ? String(row.Date_PC_Week).trim() : null
            }));

            const request = {
                Id: headerData.Id || 0,
                Ven_PoId: headerData.Id || 0,
                Vendor: headerData.Vendor || '',
                PO_No: headerData.PO_No || '',
                PO_Date: headerData.PO_Date ? new Date(headerData.PO_Date) : null,
                PO_Qty: poQty,
                Balance_Qty: balanceQty,
                Key : headerData.Key,
                Key1 : headerData.Key1,
                DeliveryScheduleList: mappedData
            };

            $.ajax({
                type: "POST",
                url: '@Url.Action("SaveDeliverySchedule", "OpenPo")',
                data: JSON.stringify(request),
                contentType: "application/json",
                success: function () {
                    Blockloaderhide();
                    $(".alert-success").remove();
                    showSuccessAlert("Schedule saved successfully!");
                    $("#deliveryScheduleModal").modal('hide');
                    // if (userType == "Vendor") {
                    //     loadVendorData();
                    // } else {
                        loadData();
                    // }
                },
                error: function () {
                    Blockloaderhide();
                    showDangerAlert("Failed to save schedule. Please try again.");
                }
            });
        }

        // function saveDeliverySchedule() {
        //     Blockloadershow();
        //     let data = deliveryScheduleTable.getData();

        //     for (let row of data) {
        //         if (!row.Delivery_Date && (!row.Delivery_Remarks || row.Delivery_Remarks.trim() === "")) {
        //             Blockloaderhide();
        //             showDangerAlert("Remarks mandatory if Delivery Date is blank.");
        //             return;
        //         }
        //     }

        //     let totalQty = 0;
        //     for (let row of data) {
        //         let qty = parseFloat(row.Delivery_Qty);
        //         if (!isNaN(qty)) {
        //             totalQty += qty;
        //         }
        //     }

        //     let headerData = poRowDataCache[selectedPoId];
        //     let poQty = parseFloat(headerData.PO_Qty);

        //     if (totalQty > poQty) {
        //         Blockloaderhide();
        //         showDangerAlert(`Total Delivery Quantity (${totalQty}) cannot be greater than PO Quantity (${poQty}).`);
        //         return;
        //     }

        //     let mappedData = data.map(row => ({
        //         SrNo: row.SrNo,
        //         Delivery_Date: row.Delivery_Date ? new Date(row.Delivery_Date) : null,
        //         Delivery_Qty: row.Delivery_Qty || null,  // if you have Delivery_Qty
        //         Delivery_Remark: row.Delivery_Remark || null
        //     }));

        //     let request = {
        //         Id: headerData.Id || 0,
        //         Ven_PoId: headerData.Id || 0,
        //         Vendor: headerData.Vendor || '',
        //         PO_No: headerData.PO_No || '',
        //         PO_Date: headerData.PO_Date ? new Date(headerData.PO_Date) : null,
        //         PO_Qty: headerData.PO_Qty || 0,
        //         Balance_Qty: headerData.Balance_Qty || 0,
        //         DeliveryScheduleList: mappedData
        //     };

        //     $.ajax({
        //         type: "POST",
        //         url: '@Url.Action("SaveDeliverySchedule", "OpenPo")',
        //         data: JSON.stringify(request),
        //         contentType: "application/json",
        //         success: function (response) {
        //             Blockloaderhide();
        //             showSuccessAlert("Schedule saved successfully!");

        //              $("#deliveryScheduleModal").modal('hide');

        //              if(userType == "Vendor")
        //              {
        //                  loadVendorData()
        //              }
        //              else
        //              {
        //                 loadData();
        //              }
        //         }
        //     });
        // }

        function saveEditedRow(rowData) {
            debugger
            if (!rowData) {
                showDangerAlert("Invalid data provided.");
                return;
            }

            Blockloadershow();
            var errorMsg = "";

            if (errorMsg !== "") {
                Blockloaderhide();
                showDangerAlert(errorMsg);
                return false;
            }

            function toIsoDate(value) {
                if (!value || value === "" || value === "Invalid Date") return null;

                if (typeof value === "string" && value.includes("/")) {
                    const parts = value.split("/");
                    if (parts.length === 3) {
                        const [day, month, year] = parts;
                        return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
                    }
                }

                const parsed = new Date(value);
                return isNaN(parsed.getTime()) ? null : parsed.toISOString().substring(0, 10);
            }

            var Model = {
                Id: rowData.Id || 0,
                Comit_Date: toIsoDate(rowData.Comit_Date),
                Comit_Qty: rowData.Comit_Qty || 0,
                Comit_Planner_Qty: rowData.Comit_Planner_Qty || 0,
                Comit_Planner_date: toIsoDate(rowData.Comit_Planner_date),
                Comit_Vendor_Date: toIsoDate(rowData.Comit_Vendor_Date),
                Comit_Vendor_Qty: rowData.Comit_Vendor_Qty || 0,
                Comit_Planner_Remark: rowData.Comit_Planner_Remark || null,
                Comit_Date1: toIsoDate(rowData.Comit_Date1),
                Comit_Qty1: rowData.Comit_Qty1 || 0,
                Comit_Final_Date: toIsoDate(rowData.Comit_Final_Date),
                Comit_Final_Qty: rowData.Comit_Final_Qty || 0,
                PCWeekDate: rowData.PCWeekDate || null,
                Buffer_Day: rowData.Buffer_Day || 0
            };

            $.ajax({
                url: '@Url.Action("Update", "OpenPo")',
                type: "POST",
                data: JSON.stringify(Model),
                contentType: 'application/json',
                success: function (response) {
                    Blockloaderhide();
                    $(".alert-success").remove();
                    if (response.success) {
                        showSuccessPoAlert('Saved successfully!');
                        if(userType == "Vendor")
                        {
                            loadVendorData()
                        }
                        else
                        {
                            loadPCCalendar().always(function () {
                               loadData();
                            });
                        }
                    }
                    else {
                        let errorMessg = "";
                        if (response.errors) {
                            for (var error in response.errors) {
                                if (response.errors.hasOwnProperty(error)) {
                                    errorMessg += `${response.errors[error]}\n`;
                                }
                            }
                        }
                        showDangerAlert(errorMessg || response.message || "An error occurred while updating.");
                    }
                },
                error: function (xhr, status, error) {
                    Blockloaderhide();
                    showDangerAlert("An unexpected error occurred. Please refresh the page and try again.");
                }
            });
        }


        function saveBuffForPO(deliveryId,buff) {
            debugger
            if (deliveryId == null || Number.isNaN(buff)) {
              showDangerAlert("Invalid data provided (id/buffer).");
              return;
            }

            Blockloadershow();
            var errorMsg = "";

            if (errorMsg !== "") {
                Blockloaderhide();
                showDangerAlert(errorMsg);
                return false;
            }


            $.ajax({
                url: '@Url.Action("UpdateBuffSchedule", "OpenPo")', // method name without "Async" in route
                type: "POST",
                dataType: "json",
                data: { id: deliveryId, buff: buff },
                success: function (response) {
                    Blockloaderhide();
                    $(".alert-success").remove();
                    if (response.success) {
                        showSuccessPoAlert('Saved successfully!');
                        if(userType == "Vendor")
                        {
                            loadVendorData()
                        }
                        else
                        {
                            loadPCCalendar().always(function () {
                               loadData();
                            });
                        }
                    }
                    else {
                        let errorMessg = "";
                        if (response.errors) {
                            for (var error in response.errors) {
                                if (response.errors.hasOwnProperty(error)) {
                                    errorMessg += `${response.errors[error]}\n`;
                                }
                            }
                        }
                        showDangerAlert(errorMessg || response.message || "An error occurred while updating.");
                    }
                },
                error: function (xhr, status, error) {
                    Blockloaderhide();
                    showDangerAlert("An unexpected error occurred. Please refresh the page and try again.");
                }
            });
        }
       
    </script>
}
@section HideSidebar { }
@await Html.PartialAsync("_UploadModalpartial")



