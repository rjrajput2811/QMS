@{
    ViewData["Title"] = "Physical Check & Visual Inspection";
}

<!-- CSS files -->
<link href="~/css/fontawesome/styles.min.css" rel="stylesheet" />
<link href="~/css/tabulator/tabulator.min.css" rel="stylesheet" />
<link href="~/css/tabulator/tabulator_bootstrap4.min.css" rel="stylesheet" />
<link href="~/css/pnotify.css" rel="stylesheet" />

<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/litepicker/dist/css/litepicker.css" />

<style>
    /* Your custom CSS */
    .nav-pills .nav-link {
        text-align: left;
        border-radius: 0;
        border-left: 4px solid transparent;
        font-weight: 500;
        width: 100%;
        padding: 12px;
        background-color: #fff;
        color: #333;
        margin-bottom: 4px;
    }

        .nav-pills .nav-link.active {
            background-color: #f4f3f8;
            border-left: 4px solid #645394;
            color: #645394;
            font-weight: bold;
        }

    .form-control {
        padding: 0 10px !important;
        border: 0;
        border-bottom: 1px solid #cccccc;
        border-radius: 0px;
    }

    label {
        margin-bottom: 0;
        margin-top: .3rem;
    }

    #scrollToTopBtn:hover {
        background-color: #0056b3;
    }

    #scrollToTopBtn {
        outline: none;
    }

    .tabulator .tabulator-header .tabulator-col {
        font-size: 14px;
        background-color: #D6E4F0;
        font-weight: 600;
        border-right: 1px solid #ccc;
    }

    .tabulator-row .tabulator-cell {
        padding: 5px 5px;
        font-size: 14px;
        height: 35px;
    }

    .tabulator-cell:hover {
        color: #4682B4 !important;
        cursor: pointer !important;
        font-weight: bold;
    }

    .form-group {
        margin-bottom: 0.5rem;
    }
    /* Select2 styling inside Tabulator cells */
    .select2-container--default .select2-selection--single {
        height: auto !important;
        padding: 5px !important;
    }

    .select2-dropdown {
        z-index: 999999 !important;
    }

    .autocomplete-dropdown {
        position: absolute;
        z-index: 99999 !important;
        background: #fff;
        border: 1px solid #ccc;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
        max-height: 200px;
        overflow-y: auto;
        border-radius: 4px;
        font-family: Arial, sans-serif;
        font-size: 14px;
    }

    .autocomplete-option {
        padding: 6px 10px;
        border-bottom: 1px solid #eee;
        cursor: pointer;
        white-space: nowrap;
    }

        .autocomplete-option:hover {
            background-color: #f0f0f0;
        }

    .modal-body {
        overflow: visible !important; /* required for dropdown to be visible in Bootstrap modal */
    }

    .calendar-container {
        cursor: pointer;
        padding: 8px 8px;
        width: 100%;
        border-radius: 5px;
        display: flex;
        align-items: center;
        justify-content: flex-start;
        transition: background-color 0.3s, box-shadow 0.3s;
        gap: 8px;
        border: 1px solid slategray;
    }

        .calendar-container:hover {
            background-color: #e3f2fd;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        .calendar-container i.fa-calendar {
            color: #2196f3;
            font-size: 1.2em;
            padding-left: 20px;
        }

        .calendar-container span {
            color: #4682B4;
            margin: 0;
            font-size: 14px;
        }

    .container__predefined-ranges {
        font-size: 14px;
    }

    .month-item {
        font-size: 14px;
    }

    @@keyframes flash-bg {
        0% {
            background-color: #fff3cd;
        }
        /* light warning */
        100% {
            background-color: #e6e6e6 !important;
        }
    }

    .row-flash {
        animation: flash-bg 2s ease-out forwards;
    }

    .tab-multi-ac {
        display: flex;
        flex-wrap: wrap;
        gap: .35rem;
        align-items: center;
        min-height: 30px;
        padding: 4px;
        cursor: text;
    }

        .tab-multi-ac input {
            border: none;
            outline: none;
            flex: 1 0 120px;
            min-width: 100px;
        }

    .tab-tag {
        display: inline-flex;
        align-items: center;
        gap: .35rem;
        padding: 2px 8px;
        border-radius: 12px;
        background: #eef1f6;
        font-size: 12px;
    }

        .tab-tag .tab-x {
            cursor: pointer;
            font-weight: 700;
        }

    .autocomplete-dropdown {
        position: fixed; /* stays put while page scrolls */
        z-index: 99999;
        max-height: 240px;
        overflow: auto;
        border: 1px solid #ddd;
        background: #fff;
        box-shadow: 0 6px 18px rgba(0,0,0,.08);
    }

    .autocomplete-option {
        padding: 6px 10px;
        cursor: pointer;
        white-space: nowrap;
    }

        .autocomplete-option:hover, .autocomplete-option.active {
            background: #f2f6ff;
        }
</style>

<div class="content">
    <div class="card">
        <div class="card-body d-flex justify-content-between align-items-center">
            <div>
                <b style="font-size: large; color: #4682B4;">Physical Check & Visual Inspection</b>
            </div>
            <div>
                <button id="addPhyCheckButton" type="button" class="btn btn-outline-success legitRipple mr-2" onclick="location.href='@Url.Action("PhysicalCheckAndVisualInspectionDetails", "ProductValidation")'" style="width: 140px; font-size:15px">
                    <i class="fas fa-plus mr-2 fa-1x"></i>Add
                </button>
                <button id="backButton" class="btn btn-outline-primary" onclick="location.href='@Url.Action("Index", "ProductValidation")'">
                    <i class="fas fa-arrow-left"></i> Back
                </button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="chart-container">

                        <div id="rmtc_table_wrapper" style="overflow-x: auto;">
                            <div id="phyCheck_table"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/tabulator.js"></script>
    <script src="~/js/tabulator.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

    <!-- Moment.js and Litepicker -->
    <script src="https://cdn.jsdelivr.net/npm/moment/min/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/litepicker/dist/litepicker.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/litepicker/dist/plugins/ranges.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/exceljs@4.4.0/dist/exceljs.min.js"></script>
    <script asp-append-version="true">
        window.APP_BASE = '@Url.Content("~")';
        window.LOGO_URL = '@Url.Content("~/images/wipro-logo.png")';

        var tabledata = [];
        var table = '';
        const searchTerms = {};
        $(document).ready(function () {
            loadProductValidationGridData();
        });

        function loadProductValidationGridData() {
            Blockloadershow();
            $.ajax({
                url: '@Url.Action("GetPhysicalCheckAndVisualInspectionList", "ProductValidation")',
                type: 'GET',
                success: function (data) {
                    Blockloaderhide();
                    if (data && Array.isArray(data)) {
                        OnProductValidationGridLoad(data);
                    }
                    else {
                        showDangerAlert('No data available to load.');
                    }
                },
                error: function (xhr, status, error) {
                    showDangerAlert('Error retrieving data: ' + error);
                    Blockloaderhide();
                }
            });
        }

        var headerMenu = function () {
            var menu = [];
            var columns = this.getColumns();

            for (let column of columns) {

                //create checkbox element using font awesome icons
                let icon = document.createElement("i");
                icon.classList.add("fas");
                icon.classList.add(column.isVisible() ? "fa-check-square" : "fa-square");

                //build label
                let label = document.createElement("span");
                let title = document.createElement("span");

                title.textContent = " " + column.getDefinition().title;

                label.appendChild(icon);
                label.appendChild(title);

                //create menu item
                menu.push({
                    label: label,
                    action: function (e) {
                        //prevent menu closing
                        e.stopPropagation();

                        //toggle current column visibility
                        column.toggle();

                        //change menu item icon
                        if (column.isVisible()) {
                            icon.classList.remove("fa-square");
                            icon.classList.add("fa-check-square");
                        } else {
                            icon.classList.remove("fa-check-square");
                            icon.classList.add("fa-square");
                        }
                    }
                });
            }

            return menu;
        };

        function OnProductValidationGridLoad(response) {
            Blockloadershow();
            tabledata = [];
            let columns = [];

            // Map the response to the table format
            if (response.length > 0) {
                $.each(response, function (index, item) {

                    let reportDate = "";
                    if (item.addedOn) {
                        const dateObj = new Date(item.report_Date);
                        reportDate = dateObj.toLocaleDateString("en-GB");
                    }

                    tabledata.push({
                        Sr_No: index + 1,
                        Id: item.id,
                        Report_No: item.report_No,
                        Report_Date: reportDate,
                        Project_Name: item.project_Name,
                        Quantity: item.quantity,
                        User: item.user
                    });
                });

                columns.push(
                    {
                        title: "Action",
                        field: "Action",
                        width: 80,
                        headerMenu: headerMenu,
                        hozAlign: "center",
                        headerHozAlign: "center",
                        formatter: function (cell, formatterParams) {
                            const rowData = cell.getRow().getData();
                            let actionButtons = "";

                            actionButtons += `<i data-toggle="modal" onclick="delPhyCheckConfirm(${rowData.Id})" class="fas fa-trash-alt mr-2 fa-1x" title="Delete" style="color:red;cursor:pointer;margin-left: 5px;"></i>`;
                            actionButtons += `<i onclick="exportToExcel(${rowData.Id})" class="fas fa-file-excel fa-1x" title="Export to Excel" style="color:green;cursor:pointer;margin-left: 5px;"></i>`;

                            return actionButtons;
                        }
                    },
                    { title: "SNo", field: "Sr_No", width: 50, responsive: 0,  sorter: "number", headerMenu: headerMenu, hozAlign: "center", headerHozAlign: "left" },
                    { title: "Report No", field: "Report_No", responsive: 1, sorter: "date", headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" },
                    { title: "Report Date", field: "Report_Date", responsive: 2,  headerMenu: headerMenu, headerFilter: "input", hozAlign: "center", headerHozAlign: "center" },
                    { title: "Customer/Project Name", field: "Project_Name", responsive: 3,  headerMenu: headerMenu, headerFilter: "input", hozAlign: "left", headerHozAlign: "left" },
                    { title: "Quantity", field: "Quantity", responsive: 4,  headerMenu: headerMenu, headerFilter: "input", hozAlign: "left", headerHozAlign: "left" },
                    { title: "User", field: "User", responsive: 5,  headerMenu: headerMenu, headerFilter: "input", hozAlign: "left", headerHozAlign: "left" },
                );

                // // Initialize Tabulator
                table = new Tabulator("#phyCheck_table", {
                    data: tabledata,
                    layout: "fitDataTable",
                    responsiveLayout: false,
                    height: "auto",
                    movableColumns: true,
                    pagination: "local",
                    paginationSize: 10,
                    paginationSizeSelector: [50, 100, 500, 1500, 2000],
                    paginationCounter: "rows",
                    paginationElement: document.getElementById("pager"),
                    dataEmpty: "<div style='text-align: center; font-size: 1rem; color: gray;'>No data available</div>", // Placeholder message
                    columns: columns
                });

                table.on("cellClick", function (e, cell) {
                    let columnField = cell.getColumn().getField();

                    if (columnField !== "Action") {
                        let rowData = cell.getRow().getData();
                        window.open("@Url.Action("PhysicalCheckAndVisualInspectionDetails", "ProductValidation")" + "/" + rowData.Id, '_self');
                    }
                });

                let savedFilters = sessionStorage.getItem("ProductValidationFilters");
                if (savedFilters) {
                    const filters = JSON.parse(savedFilters);

                    // Apply filters to the table
                    table.setFilter(filters);

                    // After table is fully built, set header filter inputs
                    table.on("tableBuilt", function () {
                        filters.forEach(f => {
                            if (f.field && f.value !== undefined) {
                                table.setHeaderFilterValue(f.field, f.value);
                            }
                        });
                    });
                }

                table.on("dataFiltered", function (filters) {

                    if (filters.length === 0) {
                        return false;
                    }
                    // only store header filters, not programmatic ones
                    let headerFilters = table.getHeaderFilters();

                    // If all header inputs are empty, force-clear filters
                    if (headerFilters.length === 0) {
                        table.clearFilter(true); // true = silent clear (prevents loops)
                        sessionStorage.removeItem("ProductValidationFilters");
                        return;
                    }

                    // Otherwise, save unique filters
                    let unique = [];
                    let seen = new Set();

                    headerFilters.forEach(f => {
                        if (f.value !== "" && !seen.has(f.field)) {
                            seen.add(f.field);
                            unique.push(f);
                        }
                    });

                    if (unique.length > 0) {
                        sessionStorage.setItem("ProductValidationFilters", JSON.stringify(unique));
                    } else {
                        sessionStorage.removeItem("ProductValidationFilters");
                    }
                });

                // Force refresh when inputs are cleared
                table.on("headerFilterBlur", function () {
                    let headerFilters = table.getHeaderFilters();

                    if (headerFilters.length === 0) {
                        table.clearFilter(); // unfilter table
                    }
                });
            }
            else {
                showDangerAlert('No data available.');
            }

            // Hide loader
            Blockloaderhide();
        }

        function delPhyCheckConfirm(recid) {
            PNotify.prototype.options.styling = "bootstrap3";
            (new PNotify({
                title: 'Confirmation Needed',
                text: 'Are you sure to delete? It will not delete if this record is used in transactions.',
                icon: 'glyphicon glyphicon-question-sign',
                hide: false,
                confirm: {
                    confirm: true
                },
                buttons: {
                    closer: false,
                    sticker: false
                },
                history: {
                    history: false
                },
            })).get().on('pnotify.confirm', function () {
                $.ajax({
                    url: '@Url.Action("DeletePhysicalCheckAndVisualInspection", "ProductValidation")',
                    type: 'POST',
                    data: { Id: recid },
                    success: function (data) {
                        if (data.success == true) {
                            showSuccessAlert("Deleted successfully.");
                            setTimeout(function () {
                                window.location.reload();
                            }, 2500);
                        }
                        else {
                            showDangerAlert(data.message);
                        }
                    },
                    error: function () {
                        showDangerAlert('Error retrieving data.');
                    }
                });
            }).on('pnotify.cancel', function () {
                loadData();
            });
        }

        function exportToExcel(recid) {
            Blockloadershow();
            $.ajax({
                url: '@Url.Action("ExportPhyCheckToExcel", "ProductValidation")',
                data: { Id: recid },
                type: 'POST',
                xhrFields: {
                    responseType: 'blob' // Expect a blob response for file download
                },
                success: function (data, status, xhr) {
                    // Create a blob from the response data
                    var blob = new Blob([data], { type: xhr.getResponseHeader('Content-Type') });

                    // Extract the file name from the response headers (Content-Disposition)
                    var contentDisposition = xhr.getResponseHeader('Content-Disposition');
                    var fileName = '';

                    if (contentDisposition) {
                        // Check if the filename is encoded as UTF-8
                        var fileNameMatch = contentDisposition.match(/filename\*=UTF-8''(.+)/);
                        if (fileNameMatch && fileNameMatch.length > 1) {
                            // Decode URI encoding to get the actual file name
                            fileName = decodeURIComponent(fileNameMatch[1].split(';')[0].trim());
                        } else {
                            // Fallback to simple filename extraction without UTF-8 encoding
                            var fileNameSimpleMatch = contentDisposition.match(/filename="?(.+)"?/);
                            if (fileNameSimpleMatch && fileNameSimpleMatch.length > 1) {
                                fileName = fileNameSimpleMatch[1].split(';')[0].trim();
                            }
                        }
                    }

                    // Fallback to a default file name if extraction fails
                    if (!fileName) {
                        fileName = 'PhysicalCheckAndVisualInspection.xlsx';
                    }

                    // Create a temporary link element to trigger the download
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(blob);
                    link.download = fileName;

                    // Append link to the body and trigger the download
                    document.body.appendChild(link);
                    link.click();

                    // Clean up: remove the link after the download is triggered
                    document.body.removeChild(link);

                },
                error: function (xhr) {
                    if (xhr.status === 401) {
                        window.location.href = '@Url.Action("Login", "Account")';
                    } else {
                        showDangerAlert('An error occurred. Please refresh the page and try again.');
                    }
                },
                complete: function () {
                    Blockloaderhide(); // Hide loader
                }
            });
        }
    </script>

    <!-- Your main PDI Tracker script -->
    <script src="~/scripts/rmtc/rmtc-tracker.js" asp-append-version="true"></script>
}

@section HideSidebar { }